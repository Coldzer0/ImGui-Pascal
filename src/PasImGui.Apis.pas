{
  FreePascal / Delphi bindings for ImGui

  Copyright (C) 2023 Coldzer0 <Coldzer0 [at] protonmail.ch>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the MIT License.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  MIT License for more details.
}

unit PasImGui.Apis;

{$I ImGuiPasDef.inc}

{$IfDef FPC}
  {$PACKRECORDS C}   
  {$mode objfpc}{$H+}
  {$modeswitch advancedrecords}
{$EndIf}  

interface  
uses
    PasImGui.Enums, PasImGui.Types; // All Needed Types form cimgui

{$IfDef DYNAMIC_LINK}
  const
  {$if defined(Darwin)}
    SharedSuffix = 'dylib';
  {$elseif defined(linux)}
    SharedSuffix = 'so';
  {$elseif defined(MSWINDOWS)}
    SharedSuffix = 'dll';
  {$endif}
  CIMGUI_LIB = 'cimgui.' + SharedSuffix;
{$ELSE}
  {$IfDef FPC}
    {$LinkLib libcimgui.a}
    {$IfDef MSWINDOWS}
      {$linklib mingwex}
      {$linklib mingw32}
      {$linklib gcc}
      {$LinkLib oleaut32}
      {$LinkLib setupapi}
      {$LinkLib imm32}
      {$LinkLib version}
      {$LinkLib winmm}
      {$LinkLib gdi32}
      {$LinkLib ole32}
      {$linklib msvcrt}
      {$linklib msvcr120}
      {$linklib kernel32}
      {$linklib advapi32}
      {$linklib user32}
      {$linklib shell32}
    {$EndIf}
  {$ELSE}
  Ops ^_^ no static linking for Delphi :P
  {$EndIf}
{$EndIf}

procedure ImBitVector_Clear( self : PImBitVector ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImBitVector_ClearBit( self : PImBitVector; n : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImBitVector_Create( self : PImBitVector; sz : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImBitVector_SetBit( self : PImBitVector; n : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImBitVector_TestBit( self : PImBitVector; n : Integer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImColor_HSV( pOut : PImColor; h : Single; s : Single; v : Single; a : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImColor_ImColor_Nil( ) : PImColor; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImColor_ImColor_Float( r : Single; g : Single; b : Single; a : Single ) : PImColor; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImColor_ImColor_Vec4( col : ImVec4 ) : PImColor; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImColor_ImColor_Int( r : Integer; g : Integer; b : Integer; a : Integer ) : PImColor; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImColor_ImColor_U32( rgba : ImU32 ) : PImColor; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImColor_SetHSV( self : PImColor; h : Single; s : Single; v : Single; a : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImColor_destroy( self : PImColor ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImDrawCmd_GetTexID( self : PImDrawCmd ) : ImTextureID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImDrawCmd_ImDrawCmd( ) : PImDrawCmd; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawCmd_destroy( self : PImDrawCmd ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImDrawDataBuilder_ImDrawDataBuilder( ) : PImDrawDataBuilder; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawDataBuilder_destroy( self : PImDrawDataBuilder ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawData_AddDrawList( self : PImDrawData; draw_list : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawData_Clear( self : PImDrawData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawData_DeIndexAllBuffers( self : PImDrawData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImDrawData_ImDrawData( ) : PImDrawData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawData_ScaleClipRects( self : PImDrawData; fb_scale : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawData_destroy( self : PImDrawData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImDrawListSharedData_ImDrawListSharedData( ) : PImDrawListSharedData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawListSharedData_SetCircleTessellationMaxError( self : PImDrawListSharedData; max_error : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawListSharedData_destroy( self : PImDrawListSharedData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawListSplitter_Clear( self : PImDrawListSplitter ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawListSplitter_ClearFreeMemory( self : PImDrawListSplitter ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImDrawListSplitter_ImDrawListSplitter( ) : PImDrawListSplitter; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawListSplitter_Merge( self : PImDrawListSplitter; draw_list : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawListSplitter_SetCurrentChannel( self : PImDrawListSplitter; draw_list : PImDrawList; channel_idx : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawListSplitter_Split( self : PImDrawListSplitter; draw_list : PImDrawList; count : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawListSplitter_destroy( self : PImDrawListSplitter ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddBezierCubic( self : PImDrawList; p1 : ImVec2; p2 : ImVec2; p3 : ImVec2; p4 : ImVec2; col : ImU32; thickness : Single; num_segments : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddBezierQuadratic( self : PImDrawList; p1 : ImVec2; p2 : ImVec2; p3 : ImVec2; col : ImU32; thickness : Single; num_segments : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddCallback( self : PImDrawList; callback : ImDrawCallback; callback_data : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddCircle( self : PImDrawList; center : ImVec2; radius : Single; col : ImU32; num_segments : Integer; thickness : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddCircleFilled( self : PImDrawList; center : ImVec2; radius : Single; col : ImU32; num_segments : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddConvexPolyFilled( self : PImDrawList; points : PImVec2; num_points : Integer; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddDrawCmd( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddEllipse( self : PImDrawList; center : ImVec2; radius_x : Single; radius_y : Single; col : ImU32; rot : Single; num_segments : Integer; thickness : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddEllipseFilled( self : PImDrawList; center : ImVec2; radius_x : Single; radius_y : Single; col : ImU32; rot : Single; num_segments : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddImage( self : PImDrawList; user_texture_id : ImTextureID; p_min : ImVec2; p_max : ImVec2; uv_min : ImVec2; uv_max : ImVec2; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddImageQuad( self : PImDrawList; user_texture_id : ImTextureID; p1 : ImVec2; p2 : ImVec2; p3 : ImVec2; p4 : ImVec2; uv1 : ImVec2; uv2 : ImVec2; uv3 : ImVec2; uv4 : ImVec2; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddImageRounded( self : PImDrawList; user_texture_id : ImTextureID; p_min : ImVec2; p_max : ImVec2; uv_min : ImVec2; uv_max : ImVec2; col : ImU32; rounding : Single; flags : ImDrawFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddLine( self : PImDrawList; p1 : ImVec2; p2 : ImVec2; col : ImU32; thickness : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddNgon( self : PImDrawList; center : ImVec2; radius : Single; col : ImU32; num_segments : Integer; thickness : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddNgonFilled( self : PImDrawList; center : ImVec2; radius : Single; col : ImU32; num_segments : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddPolyline( self : PImDrawList; points : PImVec2; num_points : Integer; col : ImU32; flags : ImDrawFlags; thickness : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddQuad( self : PImDrawList; p1 : ImVec2; p2 : ImVec2; p3 : ImVec2; p4 : ImVec2; col : ImU32; thickness : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddQuadFilled( self : PImDrawList; p1 : ImVec2; p2 : ImVec2; p3 : ImVec2; p4 : ImVec2; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddRect( self : PImDrawList; p_min : ImVec2; p_max : ImVec2; col : ImU32; rounding : Single; flags : ImDrawFlags; thickness : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddRectFilled( self : PImDrawList; p_min : ImVec2; p_max : ImVec2; col : ImU32; rounding : Single; flags : ImDrawFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddRectFilledMultiColor( self : PImDrawList; p_min : ImVec2; p_max : ImVec2; col_upr_left : ImU32; col_upr_right : ImU32; col_bot_right : ImU32; col_bot_left : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddText_Vec2( self : PImDrawList; pos : ImVec2; col : ImU32; text_begin : PAnsiChar; text_end : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddText_FontPtr( self : PImDrawList; font : PImFont; font_size : Single; pos : ImVec2; col : ImU32; text_begin : PAnsiChar; text_end : PAnsiChar; wrap_width : Single; cpu_fine_clip_rect : PImVec4 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddTriangle( self : PImDrawList; p1 : ImVec2; p2 : ImVec2; p3 : ImVec2; col : ImU32; thickness : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_AddTriangleFilled( self : PImDrawList; p1 : ImVec2; p2 : ImVec2; p3 : ImVec2; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_ChannelsMerge( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_ChannelsSetCurrent( self : PImDrawList; n : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_ChannelsSplit( self : PImDrawList; count : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImDrawList_CloneOutput( self : PImDrawList ) : PImDrawList; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_GetClipRectMax( pOut : PImVec2; self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_GetClipRectMin( pOut : PImVec2; self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImDrawList_ImDrawList( shared_data : PImDrawListSharedData ) : PImDrawList; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PathArcTo( self : PImDrawList; center : ImVec2; radius : Single; a_min : Single; a_max : Single; num_segments : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PathArcToFast( self : PImDrawList; center : ImVec2; radius : Single; a_min_of_12 : Integer; a_max_of_12 : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PathBezierCubicCurveTo( self : PImDrawList; p2 : ImVec2; p3 : ImVec2; p4 : ImVec2; num_segments : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PathBezierQuadraticCurveTo( self : PImDrawList; p2 : ImVec2; p3 : ImVec2; num_segments : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PathClear( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PathEllipticalArcTo( self : PImDrawList; center : ImVec2; radius_x : Single; radius_y : Single; rot : Single; a_min : Single; a_max : Single; num_segments : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PathFillConvex( self : PImDrawList; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PathLineTo( self : PImDrawList; pos : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PathLineToMergeDuplicate( self : PImDrawList; pos : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PathRect( self : PImDrawList; rect_min : ImVec2; rect_max : ImVec2; rounding : Single; flags : ImDrawFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PathStroke( self : PImDrawList; col : ImU32; flags : ImDrawFlags; thickness : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PopClipRect( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PopTextureID( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PrimQuadUV( self : PImDrawList; a : ImVec2; b : ImVec2; c : ImVec2; d : ImVec2; uv_a : ImVec2; uv_b : ImVec2; uv_c : ImVec2; uv_d : ImVec2; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PrimRect( self : PImDrawList; a : ImVec2; b : ImVec2; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PrimRectUV( self : PImDrawList; a : ImVec2; b : ImVec2; uv_a : ImVec2; uv_b : ImVec2; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PrimReserve( self : PImDrawList; idx_count : Integer; vtx_count : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PrimUnreserve( self : PImDrawList; idx_count : Integer; vtx_count : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PrimVtx( self : PImDrawList; pos : ImVec2; uv : ImVec2; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PrimWriteIdx( self : PImDrawList; idx : ImDrawIdx ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PrimWriteVtx( self : PImDrawList; pos : ImVec2; uv : ImVec2; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PushClipRect( self : PImDrawList; clip_rect_min : ImVec2; clip_rect_max : ImVec2; intersect_with_current_clip_rect : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PushClipRectFullScreen( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_PushTextureID( self : PImDrawList; texture_id : ImTextureID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImDrawList__CalcCircleAutoSegmentCount( self : PImDrawList; radius : Single ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList__ClearFreeMemory( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList__OnChangedClipRect( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList__OnChangedTextureID( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList__OnChangedVtxOffset( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList__PathArcToFastEx( self : PImDrawList; center : ImVec2; radius : Single; a_min_sample : Integer; a_max_sample : Integer; a_step : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList__PathArcToN( self : PImDrawList; center : ImVec2; radius : Single; a_min : Single; a_max : Single; num_segments : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList__PopUnusedDrawCmd( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList__ResetForNewFrame( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList__TryMergeDrawCmds( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImDrawList_destroy( self : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlasCustomRect_ImFontAtlasCustomRect( ) : PImFontAtlasCustomRect; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlasCustomRect_IsPacked( self : PImFontAtlasCustomRect ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontAtlasCustomRect_destroy( self : PImFontAtlasCustomRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_AddCustomRectFontGlyph( self : PImFontAtlas; font : PImFont; id : ImWchar; width : Integer; height : Integer; advance_x : Single; offset : ImVec2 ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_AddCustomRectRegular( self : PImFontAtlas; width : Integer; height : Integer ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_AddFont( self : PImFontAtlas; font_cfg : PImFontConfig ) : PImFont; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_AddFontDefault( self : PImFontAtlas; font_cfg : PImFontConfig ) : PImFont; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_AddFontFromFileTTF( self : PImFontAtlas; filename : PAnsiChar; size_pixels : Single; font_cfg : PImFontConfig; glyph_ranges : PImWchar ) : PImFont; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_AddFontFromMemoryCompressedBase85TTF( self : PImFontAtlas; compressed_font_data_base85 : PAnsiChar; size_pixels : Single; font_cfg : PImFontConfig; glyph_ranges : PImWchar ) : PImFont; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_AddFontFromMemoryCompressedTTF( self : PImFontAtlas; compressed_font_data : Pointer; compressed_font_data_size : Integer; size_pixels : Single; font_cfg : PImFontConfig; glyph_ranges : PImWchar ) : PImFont; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_AddFontFromMemoryTTF( self : PImFontAtlas; font_data : Pointer; font_data_size : Integer; size_pixels : Single; font_cfg : PImFontConfig; glyph_ranges : PImWchar ) : PImFont; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_Build( self : PImFontAtlas ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontAtlas_CalcCustomRectUV( self : PImFontAtlas; rect : PImFontAtlasCustomRect; out_uv_min : PImVec2; out_uv_max : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontAtlas_Clear( self : PImFontAtlas ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontAtlas_ClearFonts( self : PImFontAtlas ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontAtlas_ClearInputData( self : PImFontAtlas ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontAtlas_ClearTexData( self : PImFontAtlas ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_GetCustomRectByIndex( self : PImFontAtlas; index : Integer ) : PImFontAtlasCustomRect; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_GetGlyphRangesChineseFull( self : PImFontAtlas ) : PImWchar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon( self : PImFontAtlas ) : PImWchar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_GetGlyphRangesCyrillic( self : PImFontAtlas ) : PImWchar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_GetGlyphRangesDefault( self : PImFontAtlas ) : PImWchar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_GetGlyphRangesGreek( self : PImFontAtlas ) : PImWchar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_GetGlyphRangesJapanese( self : PImFontAtlas ) : PImWchar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_GetGlyphRangesKorean( self : PImFontAtlas ) : PImWchar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_GetGlyphRangesThai( self : PImFontAtlas ) : PImWchar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_GetGlyphRangesVietnamese( self : PImFontAtlas ) : PImWchar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_GetMouseCursorTexData( self : PImFontAtlas; cursor : ImGuiMouseCursor; out_offset : PImVec2; out_size : PImVec2; out_uv_border : PImVec2; out_uv_fill : PImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontAtlas_GetTexDataAsAlpha8( self : PImFontAtlas; out_pixels : PPImU8; out_width : PInteger; out_height : PInteger; out_bytes_per_pixel : PInteger ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontAtlas_GetTexDataAsRGBA32( self : PImFontAtlas; out_pixels : PPImU8; out_width : PInteger; out_height : PInteger; out_bytes_per_pixel : PInteger ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_ImFontAtlas( ) : PImFontAtlas; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontAtlas_IsBuilt( self : PImFontAtlas ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontAtlas_SetTexID( self : PImFontAtlas; id : ImTextureID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontAtlas_destroy( self : PImFontAtlas ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontConfig_ImFontConfig( ) : PImFontConfig; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontConfig_destroy( self : PImFontConfig ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontGlyphRangesBuilder_AddChar( self : PImFontGlyphRangesBuilder; c : ImWchar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontGlyphRangesBuilder_AddRanges( self : PImFontGlyphRangesBuilder; ranges : PImWchar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontGlyphRangesBuilder_AddText( self : PImFontGlyphRangesBuilder; text : PAnsiChar; text_end : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontGlyphRangesBuilder_BuildRanges( self : PImFontGlyphRangesBuilder; out_ranges : PImVector_ImWchar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontGlyphRangesBuilder_Clear( self : PImFontGlyphRangesBuilder ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontGlyphRangesBuilder_GetBit( self : PImFontGlyphRangesBuilder; n : size_t ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder( ) : PImFontGlyphRangesBuilder; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontGlyphRangesBuilder_SetBit( self : PImFontGlyphRangesBuilder; n : size_t ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFontGlyphRangesBuilder_destroy( self : PImFontGlyphRangesBuilder ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFont_AddGlyph( self : PImFont; src_cfg : PImFontConfig; c : ImWchar; x0 : Single; y0 : Single; x1 : Single; y1 : Single; u0 : Single; v0 : Single; u1 : Single; v1 : Single; advance_x : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFont_AddRemapChar( self : PImFont; dst : ImWchar; src : ImWchar; overwrite_dst : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFont_BuildLookupTable( self : PImFont ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFont_CalcTextSizeA( pOut : PImVec2; self : PImFont; size : Single; max_width : Single; wrap_width : Single; text_begin : PAnsiChar; text_end : PAnsiChar; remaining : PPAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFont_CalcWordWrapPositionA( self : PImFont; scale : Single; text : PAnsiChar; text_end : PAnsiChar; wrap_width : Single ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFont_ClearOutputData( self : PImFont ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFont_FindGlyph( self : PImFont; c : ImWchar ) : PImFontGlyph; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFont_FindGlyphNoFallback( self : PImFont; c : ImWchar ) : PImFontGlyph; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFont_GetCharAdvance( self : PImFont; c : ImWchar ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFont_GetDebugName( self : PImFont ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFont_GrowIndex( self : PImFont; new_size : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFont_ImFont( ) : PImFont; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFont_IsGlyphRangeUnused( self : PImFont; c_begin : ImU32; c_last : ImU32 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImFont_IsLoaded( self : PImFont ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFont_RenderChar( self : PImFont; draw_list : PImDrawList; size : Single; pos : ImVec2; col : ImU32; c : ImWchar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFont_RenderText( self : PImFont; draw_list : PImDrawList; size : Single; pos : ImVec2; col : ImU32; clip_rect : ImVec4; text_begin : PAnsiChar; text_end : PAnsiChar; wrap_width : Single; cpu_fine_clip : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFont_SetGlyphVisible( self : PImFont; c : ImWchar; visible : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImFont_destroy( self : PImFont ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiComboPreviewData_ImGuiComboPreviewData( ) : PImGuiComboPreviewData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiComboPreviewData_destroy( self : PImGuiComboPreviewData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiContextHook_ImGuiContextHook( ) : PImGuiContextHook; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiContextHook_destroy( self : PImGuiContextHook ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiContext_ImGuiContext( shared_font_atlas : PImFontAtlas ) : PImGuiContext; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiContext_destroy( self : PImGuiContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDataVarInfo_GetVarPtr( self : PImGuiDataVarInfo; parent : Pointer ) : Pointer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDebugAllocInfo_ImGuiDebugAllocInfo( ) : PImGuiDebugAllocInfo; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiDebugAllocInfo_destroy( self : PImGuiDebugAllocInfo ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDockContext_ImGuiDockContext( ) : PImGuiDockContext; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiDockContext_destroy( self : PImGuiDockContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDockNode_ImGuiDockNode( id : ImGuiID ) : PImGuiDockNode; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDockNode_IsCentralNode( self : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDockNode_IsDockSpace( self : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDockNode_IsEmpty( self : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDockNode_IsFloatingNode( self : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDockNode_IsHiddenTabBar( self : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDockNode_IsLeafNode( self : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDockNode_IsNoTabBar( self : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDockNode_IsRootNode( self : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiDockNode_IsSplitNode( self : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiDockNode_Rect( pOut : PImRect; self : PImGuiDockNode ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiDockNode_SetLocalFlags( self : PImGuiDockNode; flags : ImGuiDockNodeFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiDockNode_UpdateMergedFlags( self : PImGuiDockNode ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiDockNode_destroy( self : PImGuiDockNode ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiIDStackTool_ImGuiIDStackTool( ) : PImGuiIDStackTool; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIDStackTool_destroy( self : PImGuiIDStackTool ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_AddFocusEvent( self : PImGuiIO; focused : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_AddInputCharacter( self : PImGuiIO; c : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_AddInputCharacterUTF16( self : PImGuiIO; c : ImWchar16 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_AddInputCharactersUTF8( self : PImGuiIO; str : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_AddKeyAnalogEvent( self : PImGuiIO; key : ImGuiKey; down : Boolean; v : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_AddKeyEvent( self : PImGuiIO; key : ImGuiKey; down : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_AddMouseButtonEvent( self : PImGuiIO; button : Integer; down : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_AddMousePosEvent( self : PImGuiIO; x : Single; y : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_AddMouseSourceEvent( self : PImGuiIO; source : ImGuiMouseSource ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_AddMouseViewportEvent( self : PImGuiIO; id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_AddMouseWheelEvent( self : PImGuiIO; wheel_x : Single; wheel_y : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_ClearEventsQueue( self : PImGuiIO ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_ClearInputKeys( self : PImGuiIO ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiIO_ImGuiIO( ) : PImGuiIO; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_SetAppAcceptingEvents( self : PImGuiIO; accepting_events : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_SetKeyEventNativeData( self : PImGuiIO; key : ImGuiKey; native_keycode : Integer; native_scancode : Integer; native_legacy_index : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiIO_destroy( self : PImGuiIO ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiInputEvent_ImGuiInputEvent( ) : PImGuiInputEvent; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputEvent_destroy( self : PImGuiInputEvent ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextCallbackData_ClearSelection( self : PImGuiInputTextCallbackData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextCallbackData_DeleteChars( self : PImGuiInputTextCallbackData; pos : Integer; bytes_count : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiInputTextCallbackData_HasSelection( self : PImGuiInputTextCallbackData ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiInputTextCallbackData_ImGuiInputTextCallbackData( ) : PImGuiInputTextCallbackData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextCallbackData_InsertChars( self : PImGuiInputTextCallbackData; pos : Integer; text : PAnsiChar; text_end : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextCallbackData_SelectAll( self : PImGuiInputTextCallbackData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextCallbackData_destroy( self : PImGuiInputTextCallbackData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextDeactivatedState_ClearFreeMemory( self : PImGuiInputTextDeactivatedState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState( ) : PImGuiInputTextDeactivatedState; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextDeactivatedState_destroy( self : PImGuiInputTextDeactivatedState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextState_ClearFreeMemory( self : PImGuiInputTextState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextState_ClearSelection( self : PImGuiInputTextState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextState_ClearText( self : PImGuiInputTextState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextState_CursorAnimReset( self : PImGuiInputTextState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextState_CursorClamp( self : PImGuiInputTextState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiInputTextState_GetCursorPos( self : PImGuiInputTextState ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiInputTextState_GetRedoAvailCount( self : PImGuiInputTextState ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiInputTextState_GetSelectionEnd( self : PImGuiInputTextState ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiInputTextState_GetSelectionStart( self : PImGuiInputTextState ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiInputTextState_GetUndoAvailCount( self : PImGuiInputTextState ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiInputTextState_HasSelection( self : PImGuiInputTextState ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiInputTextState_ImGuiInputTextState( ) : PImGuiInputTextState; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextState_OnKeyPressed( self : PImGuiInputTextState; key : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextState_SelectAll( self : PImGuiInputTextState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiInputTextState_destroy( self : PImGuiInputTextState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiKeyOwnerData_ImGuiKeyOwnerData( ) : PImGuiKeyOwnerData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiKeyOwnerData_destroy( self : PImGuiKeyOwnerData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiKeyRoutingData_ImGuiKeyRoutingData( ) : PImGuiKeyRoutingData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiKeyRoutingData_destroy( self : PImGuiKeyRoutingData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiKeyRoutingTable_Clear( self : PImGuiKeyRoutingTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiKeyRoutingTable_ImGuiKeyRoutingTable( ) : PImGuiKeyRoutingTable; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiKeyRoutingTable_destroy( self : PImGuiKeyRoutingTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiLastItemData_ImGuiLastItemData( ) : PImGuiLastItemData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiLastItemData_destroy( self : PImGuiLastItemData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiListClipperData_ImGuiListClipperData( ) : PImGuiListClipperData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiListClipperData_Reset( self : PImGuiListClipperData; clipper : PImGuiListClipper ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiListClipperData_destroy( self : PImGuiListClipperData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiListClipperRange_FromIndices( min : Integer; max : Integer ) : ImGuiListClipperRange; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiListClipperRange_FromPositions( y1 : Single; y2 : Single; off_min : Integer; off_max : Integer ) : ImGuiListClipperRange; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiListClipper_Begin( self : PImGuiListClipper; items_count : Integer; items_height : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiListClipper_End( self : PImGuiListClipper ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiListClipper_ImGuiListClipper( ) : PImGuiListClipper; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiListClipper_IncludeItemByIndex( self : PImGuiListClipper; item_index : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiListClipper_IncludeItemsByIndex( self : PImGuiListClipper; item_begin : Integer; item_end : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiListClipper_Step( self : PImGuiListClipper ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiListClipper_destroy( self : PImGuiListClipper ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiMenuColumns_CalcNextTotalWidth( self : PImGuiMenuColumns; update_offsets : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiMenuColumns_DeclColumns( self : PImGuiMenuColumns; w_icon : Single; w_label : Single; w_shortcut : Single; w_mark : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiMenuColumns_ImGuiMenuColumns( ) : PImGuiMenuColumns; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiMenuColumns_Update( self : PImGuiMenuColumns; spacing : Single; window_reappearing : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiMenuColumns_destroy( self : PImGuiMenuColumns ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiNavItemData_Clear( self : PImGuiNavItemData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiNavItemData_ImGuiNavItemData( ) : PImGuiNavItemData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiNavItemData_destroy( self : PImGuiNavItemData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiNextItemData_ClearFlags( self : PImGuiNextItemData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiNextItemData_ImGuiNextItemData( ) : PImGuiNextItemData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiNextItemData_destroy( self : PImGuiNextItemData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiNextWindowData_ClearFlags( self : PImGuiNextWindowData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiNextWindowData_ImGuiNextWindowData( ) : PImGuiNextWindowData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiNextWindowData_destroy( self : PImGuiNextWindowData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiOldColumnData_ImGuiOldColumnData( ) : PImGuiOldColumnData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiOldColumnData_destroy( self : PImGuiOldColumnData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiOldColumns_ImGuiOldColumns( ) : PImGuiOldColumns; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiOldColumns_destroy( self : PImGuiOldColumns ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiOnceUponAFrame_ImGuiOnceUponAFrame( ) : PImGuiOnceUponAFrame; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiOnceUponAFrame_destroy( self : PImGuiOnceUponAFrame ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiPayload_Clear( self : PImGuiPayload ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiPayload_ImGuiPayload( ) : PImGuiPayload; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiPayload_IsDataType( self : PImGuiPayload; type_ : PAnsiChar ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiPayload_IsDelivery( self : PImGuiPayload ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiPayload_IsPreview( self : PImGuiPayload ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiPayload_destroy( self : PImGuiPayload ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiPlatformIO_ImGuiPlatformIO( ) : PImGuiPlatformIO; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiPlatformIO_destroy( self : PImGuiPlatformIO ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiPlatformImeData_ImGuiPlatformImeData( ) : PImGuiPlatformImeData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiPlatformImeData_destroy( self : PImGuiPlatformImeData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiPlatformMonitor_ImGuiPlatformMonitor( ) : PImGuiPlatformMonitor; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiPlatformMonitor_destroy( self : PImGuiPlatformMonitor ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiPopupData_ImGuiPopupData( ) : PImGuiPopupData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiPopupData_destroy( self : PImGuiPopupData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr( ptr : Pointer ) : PImGuiPtrOrIndex; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int( index : Integer ) : PImGuiPtrOrIndex; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiPtrOrIndex_destroy( self : PImGuiPtrOrIndex ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiSettingsHandler_ImGuiSettingsHandler( ) : PImGuiSettingsHandler; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiSettingsHandler_destroy( self : PImGuiSettingsHandler ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStackLevelInfo_ImGuiStackLevelInfo( ) : PImGuiStackLevelInfo; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStackLevelInfo_destroy( self : PImGuiStackLevelInfo ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStackSizes_CompareWithContextState( self : PImGuiStackSizes; ctx : PImGuiContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStackSizes_ImGuiStackSizes( ) : PImGuiStackSizes; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStackSizes_SetToContextState( self : PImGuiStackSizes; ctx : PImGuiContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStackSizes_destroy( self : PImGuiStackSizes ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStoragePair_ImGuiStoragePair_Int( _key : ImGuiID; _val : Integer ) : PImGuiStoragePair; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStoragePair_ImGuiStoragePair_Float( _key : ImGuiID; _val : Single ) : PImGuiStoragePair; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStoragePair_ImGuiStoragePair_Ptr( _key : ImGuiID; _val : Pointer ) : PImGuiStoragePair; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStoragePair_destroy( self : PImGuiStoragePair ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStorage_BuildSortByKey( self : PImGuiStorage ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStorage_Clear( self : PImGuiStorage ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStorage_GetBool( self : PImGuiStorage; key : ImGuiID; default_val : Boolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStorage_GetBoolRef( self : PImGuiStorage; key : ImGuiID; default_val : Boolean ) : PBoolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStorage_GetFloat( self : PImGuiStorage; key : ImGuiID; default_val : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStorage_GetFloatRef( self : PImGuiStorage; key : ImGuiID; default_val : Single ) : PSingle; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStorage_GetInt( self : PImGuiStorage; key : ImGuiID; default_val : Integer ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStorage_GetIntRef( self : PImGuiStorage; key : ImGuiID; default_val : Integer ) : PInteger; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStorage_GetVoidPtr( self : PImGuiStorage; key : ImGuiID ) : Pointer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStorage_GetVoidPtrRef( self : PImGuiStorage; key : ImGuiID; default_val : Pointer ) : PPointer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStorage_SetAllInt( self : PImGuiStorage; val : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStorage_SetBool( self : PImGuiStorage; key : ImGuiID; val : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStorage_SetFloat( self : PImGuiStorage; key : ImGuiID; val : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStorage_SetInt( self : PImGuiStorage; key : ImGuiID; val : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStorage_SetVoidPtr( self : PImGuiStorage; key : ImGuiID; val : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStyleMod_ImGuiStyleMod_Int( idx : ImGuiStyleVar; v : Integer ) : PImGuiStyleMod; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStyleMod_ImGuiStyleMod_Float( idx : ImGuiStyleVar; v : Single ) : PImGuiStyleMod; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStyleMod_ImGuiStyleMod_Vec2( idx : ImGuiStyleVar; v : ImVec2 ) : PImGuiStyleMod; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStyleMod_destroy( self : PImGuiStyleMod ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiStyle_ImGuiStyle( ) : PImGuiStyle; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStyle_ScaleAllSizes( self : PImGuiStyle; scale_factor : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiStyle_destroy( self : PImGuiStyle ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTabBar_ImGuiTabBar( ) : PImGuiTabBar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTabBar_destroy( self : PImGuiTabBar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTabItem_ImGuiTabItem( ) : PImGuiTabItem; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTabItem_destroy( self : PImGuiTabItem ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTableColumnSettings_ImGuiTableColumnSettings( ) : PImGuiTableColumnSettings; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTableColumnSettings_destroy( self : PImGuiTableColumnSettings ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs( ) : PImGuiTableColumnSortSpecs; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTableColumnSortSpecs_destroy( self : PImGuiTableColumnSortSpecs ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTableColumn_ImGuiTableColumn( ) : PImGuiTableColumn; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTableColumn_destroy( self : PImGuiTableColumn ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTableInstanceData_ImGuiTableInstanceData( ) : PImGuiTableInstanceData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTableInstanceData_destroy( self : PImGuiTableInstanceData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTableSettings_GetColumnSettings( self : PImGuiTableSettings ) : PImGuiTableColumnSettings; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTableSettings_ImGuiTableSettings( ) : PImGuiTableSettings; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTableSettings_destroy( self : PImGuiTableSettings ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTableSortSpecs_ImGuiTableSortSpecs( ) : PImGuiTableSortSpecs; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTableSortSpecs_destroy( self : PImGuiTableSortSpecs ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTableTempData_ImGuiTableTempData( ) : PImGuiTableTempData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTableTempData_destroy( self : PImGuiTableTempData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTable_ImGuiTable( ) : PImGuiTable; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTable_destroy( self : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextBuffer_ImGuiTextBuffer( ) : PImGuiTextBuffer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextBuffer_append( self : PImGuiTextBuffer; str : PAnsiChar; str_end : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextBuffer_appendf( self : PImGuiTextBuffer; fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextBuffer_appendfv( self : PImGuiTextBuffer; fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextBuffer_begin( self : PImGuiTextBuffer ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextBuffer_c_str( self : PImGuiTextBuffer ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextBuffer_clear( self : PImGuiTextBuffer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextBuffer_destroy( self : PImGuiTextBuffer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextBuffer_empty( self : PImGuiTextBuffer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextBuffer_end( self : PImGuiTextBuffer ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextBuffer_reserve( self : PImGuiTextBuffer; capacity : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextBuffer_size( self : PImGuiTextBuffer ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextFilter_Build( self : PImGuiTextFilter ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextFilter_Clear( self : PImGuiTextFilter ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextFilter_Draw( self : PImGuiTextFilter; label_ : PAnsiChar; width : Single ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextFilter_ImGuiTextFilter( default_filter : PAnsiChar ) : PImGuiTextFilter; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextFilter_IsActive( self : PImGuiTextFilter ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextFilter_PassFilter( self : PImGuiTextFilter; text : PAnsiChar; text_end : PAnsiChar ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextFilter_destroy( self : PImGuiTextFilter ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextIndex_append( self : PImGuiTextIndex; base : PAnsiChar; old_size : Integer; new_size : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextIndex_clear( self : PImGuiTextIndex ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextIndex_get_line_begin( self : PImGuiTextIndex; base : PAnsiChar; n : Integer ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextIndex_get_line_end( self : PImGuiTextIndex; base : PAnsiChar; n : Integer ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextIndex_size( self : PImGuiTextIndex ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextRange_ImGuiTextRange_Nil( ) : PImGuiTextRange; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextRange_ImGuiTextRange_Str( _b : PAnsiChar; _e : PAnsiChar ) : PImGuiTextRange; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextRange_destroy( self : PImGuiTextRange ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTextRange_empty( self : PImGuiTextRange ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTextRange_split( self : PImGuiTextRange; separator : AnsiChar; out_ : PImVector_ImGuiTextRange ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTypingSelectState_Clear( self : PImGuiTypingSelectState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiTypingSelectState_ImGuiTypingSelectState( ) : PImGuiTypingSelectState; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiTypingSelectState_destroy( self : PImGuiTypingSelectState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiViewportP_CalcWorkRectPos( pOut : PImVec2; self : PImGuiViewportP; off_min : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiViewportP_CalcWorkRectSize( pOut : PImVec2; self : PImGuiViewportP; off_min : ImVec2; off_max : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiViewportP_ClearRequestFlags( self : PImGuiViewportP ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiViewportP_GetBuildWorkRect( pOut : PImRect; self : PImGuiViewportP ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiViewportP_GetMainRect( pOut : PImRect; self : PImGuiViewportP ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiViewportP_GetWorkRect( pOut : PImRect; self : PImGuiViewportP ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiViewportP_ImGuiViewportP( ) : PImGuiViewportP; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiViewportP_UpdateWorkRect( self : PImGuiViewportP ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiViewportP_destroy( self : PImGuiViewportP ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiViewport_GetCenter( pOut : PImVec2; self : PImGuiViewport ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiViewport_GetWorkCenter( pOut : PImVec2; self : PImGuiViewport ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiViewport_ImGuiViewport( ) : PImGuiViewport; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiViewport_destroy( self : PImGuiViewport ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiWindowClass_ImGuiWindowClass( ) : PImGuiWindowClass; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiWindowClass_destroy( self : PImGuiWindowClass ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiWindowSettings_GetName( self : PImGuiWindowSettings ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiWindowSettings_ImGuiWindowSettings( ) : PImGuiWindowSettings; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiWindowSettings_destroy( self : PImGuiWindowSettings ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiWindow_CalcFontSize( self : PImGuiWindow ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiWindow_GetID_Str( self : PImGuiWindow; str : PAnsiChar; str_end : PAnsiChar ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiWindow_GetID_Ptr( self : PImGuiWindow; ptr : Pointer ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiWindow_GetID_Int( self : PImGuiWindow; n : Integer ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiWindow_GetIDFromRectangle( self : PImGuiWindow; r_abs : ImRect ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiWindow_ImGuiWindow( context : PImGuiContext; name : PAnsiChar ) : PImGuiWindow; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiWindow_MenuBarHeight( self : PImGuiWindow ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiWindow_MenuBarRect( pOut : PImRect; self : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiWindow_Rect( pOut : PImRect; self : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImGuiWindow_TitleBarHeight( self : PImGuiWindow ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiWindow_TitleBarRect( pOut : PImRect; self : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImGuiWindow_destroy( self : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_Add_Vec2( self : PImRect; p : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_Add_Rect( self : PImRect; r : ImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_ClipWith( self : PImRect; r : ImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_ClipWithFull( self : PImRect; r : ImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_Contains_Vec2( self : PImRect; p : ImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_Contains_Rect( self : PImRect; r : ImRect ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_ContainsWithPad( self : PImRect; p : ImVec2; pad : ImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_Expand_Float( self : PImRect; amount : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_Expand_Vec2( self : PImRect; amount : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_Floor( self : PImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_GetArea( self : PImRect ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_GetBL( pOut : PImVec2; self : PImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_GetBR( pOut : PImVec2; self : PImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_GetCenter( pOut : PImVec2; self : PImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_GetHeight( self : PImRect ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_GetSize( pOut : PImVec2; self : PImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_GetTL( pOut : PImVec2; self : PImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_GetTR( pOut : PImVec2; self : PImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_GetWidth( self : PImRect ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_ImRect_Nil( ) : PImRect; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_ImRect_Vec2( min : ImVec2; max : ImVec2 ) : PImRect; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_ImRect_Vec4( v : ImVec4 ) : PImRect; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_ImRect_Float( x1 : Single; y1 : Single; x2 : Single; y2 : Single ) : PImRect; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_IsInverted( self : PImRect ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImRect_Overlaps( self : PImRect; r : ImRect ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_ToVec4( pOut : PImVec4; self : PImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_Translate( self : PImRect; d : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_TranslateX( self : PImRect; dx : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_TranslateY( self : PImRect; dy : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImRect_destroy( self : PImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImVec1_ImVec1_Nil( ) : PImVec1; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImVec1_ImVec1_Float( _x : Single ) : PImVec1; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImVec1_destroy( self : PImVec1 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImVec2_ImVec2_Nil( ) : PImVec2; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImVec2_ImVec2_Float( _x : Single; _y : Single ) : PImVec2; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImVec2_destroy( self : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImVec2ih_ImVec2ih_Nil( ) : PImVec2ih; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImVec2ih_ImVec2ih_short( _x : ImS16; _y : ImS16 ) : PImVec2ih; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImVec2ih_ImVec2ih_Vec2( rhs : ImVec2 ) : PImVec2ih; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImVec2ih_destroy( self : PImVec2ih ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImVec4_ImVec4_Nil( ) : PImVec4; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function ImVec4_ImVec4_Float( _x : Single; _y : Single; _z : Single; _w : Single ) : PImVec4; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure ImVec4_destroy( self : PImVec4 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igAcceptDragDropPayload( type_ : PAnsiChar; flags : ImGuiDragDropFlags ) : PImGuiPayload; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igActivateItemByID( id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igAddContextHook( context : PImGuiContext; hook : PImGuiContextHook ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igAddDrawListToDrawDataEx( draw_data : PImDrawData; out_list : PImVector_ImDrawListPtr; draw_list : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igAddSettingsHandler( handler : PImGuiSettingsHandler ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igAlignTextToFramePadding( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igArrowButton( str_id : PAnsiChar; dir : ImGuiDir ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igArrowButtonEx( str_id : PAnsiChar; dir : ImGuiDir; size_arg : ImVec2; flags : ImGuiButtonFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBegin( name : PAnsiChar; p_open : PBoolean; flags : ImGuiWindowFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginChild_Str( str_id : PAnsiChar; size : ImVec2; child_flags : ImGuiChildFlags; window_flags : ImGuiWindowFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginChild_ID( id : ImGuiID; size : ImVec2; child_flags : ImGuiChildFlags; window_flags : ImGuiWindowFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginChildEx( name : PAnsiChar; id : ImGuiID; size_arg : ImVec2; child_flags : ImGuiChildFlags; window_flags : ImGuiWindowFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBeginColumns( str_id : PAnsiChar; count : Integer; flags : ImGuiOldColumnFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginCombo( label_ : PAnsiChar; preview_value : PAnsiChar; flags : ImGuiComboFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginComboPopup( popup_id : ImGuiID; bb : ImRect; flags : ImGuiComboFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginComboPreview( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBeginDisabled( disabled : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBeginDockableDragDropSource( window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBeginDockableDragDropTarget( window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBeginDocked( window : PImGuiWindow; p_open : PBoolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginDragDropSource( flags : ImGuiDragDropFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginDragDropTarget( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginDragDropTargetCustom( bb : ImRect; id : ImGuiID ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBeginGroup( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginItemTooltip( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginListBox( label_ : PAnsiChar; size : ImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginMainMenuBar( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginMenu( label_ : PAnsiChar; enabled : Boolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginMenuBar( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginMenuEx( label_ : PAnsiChar; icon : PAnsiChar; enabled : Boolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginPopup( str_id : PAnsiChar; flags : ImGuiWindowFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginPopupContextItem( str_id : PAnsiChar; popup_flags : ImGuiPopupFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginPopupContextVoid( str_id : PAnsiChar; popup_flags : ImGuiPopupFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginPopupContextWindow( str_id : PAnsiChar; popup_flags : ImGuiPopupFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginPopupEx( id : ImGuiID; extra_flags : ImGuiWindowFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginPopupModal( name : PAnsiChar; p_open : PBoolean; flags : ImGuiWindowFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginTabBar( str_id : PAnsiChar; flags : ImGuiTabBarFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginTabBarEx( tab_bar : PImGuiTabBar; bb : ImRect; flags : ImGuiTabBarFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginTabItem( label_ : PAnsiChar; p_open : PBoolean; flags : ImGuiTabItemFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginTable( str_id : PAnsiChar; column : Integer; flags : ImGuiTableFlags; outer_size : ImVec2; inner_width : Single ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginTableEx( name : PAnsiChar; id : ImGuiID; columns_count : Integer; flags : ImGuiTableFlags; outer_size : ImVec2; inner_width : Single ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginTooltip( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginTooltipEx( tooltip_flags : ImGuiTooltipFlags; extra_window_flags : ImGuiWindowFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginTooltipHidden( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igBeginViewportSideBar( name : PAnsiChar; viewport : PImGuiViewport; dir : ImGuiDir; size : Single; window_flags : ImGuiWindowFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBringWindowToDisplayBack( window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBringWindowToDisplayBehind( window : PImGuiWindow; above_window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBringWindowToDisplayFront( window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBringWindowToFocusFront( window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBullet( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBulletText( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igBulletTextV( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igButton( label_ : PAnsiChar; size : ImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igButtonBehavior( bb : ImRect; id : ImGuiID; out_hovered : PBoolean; out_held : PBoolean; flags : ImGuiButtonFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igButtonEx( label_ : PAnsiChar; size_arg : ImVec2; flags : ImGuiButtonFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igCalcItemSize( pOut : PImVec2; size : ImVec2; default_w : Single; default_h : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCalcItemWidth( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCalcRoundingFlagsForRectInRect( r_in : ImRect; r_outer : ImRect; threshold : Single ) : ImDrawFlags; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igCalcTextSize( pOut : PImVec2; text : PAnsiChar; text_end : PAnsiChar; hide_text_after_double_hash : Boolean; wrap_width : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCalcTypematicRepeatAmount( t0 : Single; t1 : Single; repeat_delay : Single; repeat_rate : Single ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igCalcWindowNextAutoFitSize( pOut : PImVec2; window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCalcWrapWidthForPos( pos : ImVec2; wrap_pos_x : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igCallContextHooks( context : PImGuiContext; type_ : ImGuiContextHookType ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCheckbox( label_ : PAnsiChar; v : PBoolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCheckboxFlags_IntPtr( label_ : PAnsiChar; flags : PInteger; flags_value : Integer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCheckboxFlags_UintPtr( label_ : PAnsiChar; flags : PImU32; flags_value : ImU32 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCheckboxFlags_S64Ptr( label_ : PAnsiChar; flags : PImS64; flags_value : ImS64 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCheckboxFlags_U64Ptr( label_ : PAnsiChar; flags : PImU64; flags_value : ImU64 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igClearActiveID( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igClearDragDrop( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igClearIniSettings( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igClearWindowSettings( name : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCloseButton( id : ImGuiID; pos : ImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igCloseCurrentPopup( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igClosePopupToLevel( remaining : Integer; restore_focus_to_window_under_popup : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igClosePopupsExceptModals( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igClosePopupsOverWindow( ref_window : PImGuiWindow; restore_focus_to_window_under_popup : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCollapseButton( id : ImGuiID; pos : ImVec2; dock_node : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCollapsingHeader_TreeNodeFlags( label_ : PAnsiChar; flags : ImGuiTreeNodeFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCollapsingHeader_BoolPtr( label_ : PAnsiChar; p_visible : PBoolean; flags : ImGuiTreeNodeFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igColorButton( desc_id : PAnsiChar; col : ImVec4; flags : ImGuiColorEditFlags; size : ImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igColorConvertFloat4ToU32( in_ : ImVec4 ) : ImU32; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igColorConvertHSVtoRGB( h : Single; s : Single; v : Single; out_r : PSingle; out_g : PSingle; out_b : PSingle ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igColorConvertRGBtoHSV( r : Single; g : Single; b : Single; out_h : PSingle; out_s : PSingle; out_v : PSingle ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igColorConvertU32ToFloat4( pOut : PImVec4; in_ : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igColorEdit3( label_ : PAnsiChar; col : PSingle; flags : ImGuiColorEditFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igColorEdit4( label_ : PAnsiChar; col : PSingle; flags : ImGuiColorEditFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igColorEditOptionsPopup( col : PSingle; flags : ImGuiColorEditFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igColorPicker3( label_ : PAnsiChar; col : PSingle; flags : ImGuiColorEditFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igColorPicker4( label_ : PAnsiChar; col : PSingle; flags : ImGuiColorEditFlags; ref_col : PSingle ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igColorPickerOptionsPopup( ref_col : PSingle; flags : ImGuiColorEditFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igColorTooltip( text : PAnsiChar; col : PSingle; flags : ImGuiColorEditFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igColumns( count : Integer; id : PAnsiChar; border : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCombo_Str_arr( label_ : PAnsiChar; current_item : PInteger; items : PPAnsiChar; items_count : Integer; popup_max_height_in_items : Integer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCombo_Str( label_ : PAnsiChar; current_item : PInteger; items_separated_by_zeros : PAnsiChar; popup_max_height_in_items : Integer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCombo_FnStrPtr( label_ : PAnsiChar; current_item : PInteger; getter : TImGuiComboItemsGetterFunc ;user_data : Pointer; items_count : Integer; popup_max_height_in_items : Integer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igConvertShortcutMod( key_chord : ImGuiKeyChord ) : ImGuiKeyChord; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igConvertSingleModFlagToKey( ctx : PImGuiContext; key : ImGuiKey ) : ImGuiKey; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCreateContext( shared_font_atlas : PImFontAtlas ) : PImGuiContext; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igCreateNewWindowSettings( name : PAnsiChar ) : PImGuiWindowSettings; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDataTypeApplyFromText( buf : PAnsiChar; data_type : ImGuiDataType; p_data : Pointer; format : PAnsiChar ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDataTypeApplyOp( data_type : ImGuiDataType; op : Integer; output : Pointer; arg_1 : Pointer; arg_2 : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDataTypeClamp( data_type : ImGuiDataType; p_data : Pointer; p_min : Pointer; p_max : Pointer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDataTypeCompare( data_type : ImGuiDataType; arg_1 : Pointer; arg_2 : Pointer ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDataTypeFormatString( buf : PAnsiChar; buf_size : Integer; data_type : ImGuiDataType; p_data : Pointer; format : PAnsiChar ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDataTypeGetInfo( data_type : ImGuiDataType ) : PImGuiDataTypeInfo; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugAllocHook( info : PImGuiDebugAllocInfo; frame_count : Integer; ptr : Pointer; size : size_t ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDebugCheckVersionAndDataLayout( version_str : PAnsiChar; sz_io : size_t; sz_style : size_t; sz_vec2 : size_t; sz_vec4 : size_t; sz_drawvert : size_t; sz_drawidx : size_t ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugDrawCursorPos( col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugDrawItemRect( col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugDrawLineExtents( col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugHookIdInfo( id : ImGuiID; data_type : ImGuiDataType; data_id : Pointer; data_id_end : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugLocateItem( target_id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugLocateItemOnHover( target_id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugLocateItemResolveWithLastItem( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugLog( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugLogV( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeColumns( columns : PImGuiOldColumns ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeDockNode( node : PImGuiDockNode; label_ : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeDrawCmdShowMeshAndBoundingBox( out_draw_list : PImDrawList; draw_list : PImDrawList; draw_cmd : PImDrawCmd; show_mesh : Boolean; show_aabb : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeDrawList( window : PImGuiWindow; viewport : PImGuiViewportP; draw_list : PImDrawList; label_ : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeFont( font : PImFont ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeFontGlyph( font : PImFont; glyph : PImFontGlyph ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeInputTextState( state : PImGuiInputTextState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeStorage( storage : PImGuiStorage; label_ : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeTabBar( tab_bar : PImGuiTabBar; label_ : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeTable( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeTableSettings( settings : PImGuiTableSettings ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeTypingSelectState( state : PImGuiTypingSelectState ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeViewport( viewport : PImGuiViewportP ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeWindow( window : PImGuiWindow; label_ : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeWindowSettings( settings : PImGuiWindowSettings ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeWindowsList( windows : PImVector_ImGuiWindowPtr; label_ : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugNodeWindowsListByBeginStackParent( windows : PPImGuiWindow; windows_size : Integer; parent_in_begin_stack : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugRenderKeyboardPreview( draw_list : PImDrawList ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugRenderViewportThumbnail( draw_list : PImDrawList; viewport : PImGuiViewportP; bb : ImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugStartItemPicker( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDebugTextEncoding( text : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDestroyContext( ctx : PImGuiContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDestroyPlatformWindow( viewport : PImGuiViewportP ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDestroyPlatformWindows( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockBuilderAddNode( node_id : ImGuiID; flags : ImGuiDockNodeFlags ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockBuilderCopyDockSpace( src_dockspace_id : ImGuiID; dst_dockspace_id : ImGuiID; in_window_remap_pairs : PImVector_const_charPtr ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockBuilderCopyNode( src_node_id : ImGuiID; dst_node_id : ImGuiID; out_node_remap_pairs : PImVector_ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockBuilderCopyWindowSettings( src_name : PAnsiChar; dst_name : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockBuilderDockWindow( window_name : PAnsiChar; node_id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockBuilderFinish( node_id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockBuilderGetCentralNode( node_id : ImGuiID ) : PImGuiDockNode; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockBuilderGetNode( node_id : ImGuiID ) : PImGuiDockNode; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockBuilderRemoveNode( node_id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockBuilderRemoveNodeChildNodes( node_id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockBuilderRemoveNodeDockedWindows( node_id : ImGuiID; clear_settings_refs : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockBuilderSetNodePos( node_id : ImGuiID; pos : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockBuilderSetNodeSize( node_id : ImGuiID; size : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockBuilderSplitNode( node_id : ImGuiID; split_dir : ImGuiDir; size_ratio_for_node_at_dir : Single; out_id_at_dir : PImGuiID; out_id_at_opposite_dir : PImGuiID ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockContextCalcDropPosForDocking( target : PImGuiWindow; target_node : PImGuiDockNode; payload_window : PImGuiWindow; payload_node : PImGuiDockNode; split_dir : ImGuiDir; split_outer : Boolean; out_pos : PImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextClearNodes( ctx : PImGuiContext; root_id : ImGuiID; clear_settings_refs : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextEndFrame( ctx : PImGuiContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockContextFindNodeByID( ctx : PImGuiContext; id : ImGuiID ) : PImGuiDockNode; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockContextGenNodeID( ctx : PImGuiContext ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextInitialize( ctx : PImGuiContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextNewFrameUpdateDocking( ctx : PImGuiContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextNewFrameUpdateUndocking( ctx : PImGuiContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextProcessUndockNode( ctx : PImGuiContext; node : PImGuiDockNode ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextProcessUndockWindow( ctx : PImGuiContext; window : PImGuiWindow; clear_persistent_docking_ref : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextQueueDock( ctx : PImGuiContext; target : PImGuiWindow; target_node : PImGuiDockNode; payload : PImGuiWindow; split_dir : ImGuiDir; split_ratio : Single; split_outer : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextQueueUndockNode( ctx : PImGuiContext; node : PImGuiDockNode ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextQueueUndockWindow( ctx : PImGuiContext; window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextRebuildNodes( ctx : PImGuiContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockContextShutdown( ctx : PImGuiContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockNodeBeginAmendTabBar( node : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockNodeEndAmendTabBar( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockNodeGetDepth( node : PImGuiDockNode ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockNodeGetRootNode( node : PImGuiDockNode ) : PImGuiDockNode; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockNodeGetWindowMenuButtonId( node : PImGuiDockNode ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockNodeIsInHierarchyOf( node : PImGuiDockNode; parent : PImGuiDockNode ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDockNodeWindowMenuHandler_Default( ctx : PImGuiContext; node : PImGuiDockNode; tab_bar : PImGuiTabBar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockSpace( id : ImGuiID; size : ImVec2; flags : ImGuiDockNodeFlags; window_class : PImGuiWindowClass ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDockSpaceOverViewport( viewport : PImGuiViewport; flags : ImGuiDockNodeFlags; window_class : PImGuiWindowClass ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragBehavior( id : ImGuiID; data_type : ImGuiDataType; p_v : Pointer; v_speed : Single; p_min : Pointer; p_max : Pointer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragFloat( label_ : PAnsiChar; v : PSingle; v_speed : Single; v_min : Single; v_max : Single; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragFloat2( label_ : PAnsiChar; v : PSingle; v_speed : Single; v_min : Single; v_max : Single; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragFloat3( label_ : PAnsiChar; v : PSingle; v_speed : Single; v_min : Single; v_max : Single; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragFloat4( label_ : PAnsiChar; v : PSingle; v_speed : Single; v_min : Single; v_max : Single; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragFloatRange2( label_ : PAnsiChar; v_current_min : PSingle; v_current_max : PSingle; v_speed : Single; v_min : Single; v_max : Single; format : PAnsiChar; format_max : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragInt( label_ : PAnsiChar; v : PInteger; v_speed : Single; v_min : Integer; v_max : Integer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragInt2( label_ : PAnsiChar; v : PInteger; v_speed : Single; v_min : Integer; v_max : Integer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragInt3( label_ : PAnsiChar; v : PInteger; v_speed : Single; v_min : Integer; v_max : Integer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragInt4( label_ : PAnsiChar; v : PInteger; v_speed : Single; v_min : Integer; v_max : Integer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragIntRange2( label_ : PAnsiChar; v_current_min : PInteger; v_current_max : PInteger; v_speed : Single; v_min : Integer; v_max : Integer; format : PAnsiChar; format_max : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragScalar( label_ : PAnsiChar; data_type : ImGuiDataType; p_data : Pointer; v_speed : Single; p_min : Pointer; p_max : Pointer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igDragScalarN( label_ : PAnsiChar; data_type : ImGuiDataType; p_data : Pointer; components : Integer; v_speed : Single; p_min : Pointer; p_max : Pointer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igDummy( size : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEnd( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndChild( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndColumns( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndCombo( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndComboPreview( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndDisabled( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndDragDropSource( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndDragDropTarget( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndFrame( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndGroup( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndListBox( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndMainMenuBar( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndMenu( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndMenuBar( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndPopup( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndTabBar( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndTabItem( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndTable( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igEndTooltip( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igErrorCheckEndFrameRecover( log_callback : ImGuiErrorLogCallback; user_data : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igErrorCheckEndWindowRecover( log_callback : ImGuiErrorLogCallback; user_data : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igErrorCheckUsingSetCursorPosToExtendParentBoundaries( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igFindBestWindowPosForPopup( pOut : PImVec2; window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igFindBestWindowPosForPopupEx( pOut : PImVec2; ref_pos : ImVec2; size : ImVec2; last_dir : PImGuiDir; r_outer : ImRect; r_avoid : ImRect; policy : ImGuiPopupPositionPolicy ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindBlockingModal( window : PImGuiWindow ) : PImGuiWindow; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindBottomMostVisibleWindowWithinBeginStack( window : PImGuiWindow ) : PImGuiWindow; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindHoveredViewportFromPlatformWindowStack( mouse_platform_pos : ImVec2 ) : PImGuiViewportP; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindOrCreateColumns( window : PImGuiWindow; id : ImGuiID ) : PImGuiOldColumns; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindRenderedTextEnd( text : PAnsiChar; text_end : PAnsiChar ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindSettingsHandler( type_name : PAnsiChar ) : PImGuiSettingsHandler; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindViewportByID( id : ImGuiID ) : PImGuiViewport; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindViewportByPlatformHandle( platform_handle : Pointer ) : PImGuiViewport; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindWindowByID( id : ImGuiID ) : PImGuiWindow; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindWindowByName( name : PAnsiChar ) : PImGuiWindow; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindWindowDisplayIndex( window : PImGuiWindow ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindWindowSettingsByID( id : ImGuiID ) : PImGuiWindowSettings; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igFindWindowSettingsByWindow( window : PImGuiWindow ) : PImGuiWindowSettings; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igFocusItem( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igFocusTopMostWindowUnderOne( under_this_window : PImGuiWindow; ignore_window : PImGuiWindow; filter_viewport : PImGuiViewport; flags : ImGuiFocusRequestFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igFocusWindow( window : PImGuiWindow; flags : ImGuiFocusRequestFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGcAwakeTransientWindowBuffers( window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGcCompactTransientMiscBuffers( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGcCompactTransientWindowBuffers( window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetActiveID( ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetAllocatorFunctions( p_alloc_func : PImGuiMemAllocFunc; p_free_func : PImGuiMemFreeFunc; p_user_data : PPointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetBackgroundDrawList_Nil( ) : PImDrawList; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetBackgroundDrawList_ViewportPtr( viewport : PImGuiViewport ) : PImDrawList; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetClipboardText( ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetColorU32_Col( idx : ImGuiCol; alpha_mul : Single ) : ImU32; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetColorU32_Vec4( col : ImVec4 ) : ImU32; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetColorU32_U32( col : ImU32 ) : ImU32; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetColumnIndex( ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetColumnNormFromOffset( columns : PImGuiOldColumns; offset : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetColumnOffset( column_index : Integer ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetColumnOffsetFromNorm( columns : PImGuiOldColumns; offset_norm : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetColumnWidth( column_index : Integer ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetColumnsCount( ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetColumnsID( str_id : PAnsiChar; count : Integer ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetContentRegionAvail( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetContentRegionMax( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetContentRegionMaxAbs( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetCurrentContext( ) : PImGuiContext; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetCurrentFocusScope( ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetCurrentTabBar( ) : PImGuiTabBar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetCurrentTable( ) : PImGuiTable; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetCurrentWindow( ) : PImGuiWindow; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetCurrentWindowRead( ) : PImGuiWindow; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetCursorPos( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetCursorPosX( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetCursorPosY( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetCursorScreenPos( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetCursorStartPos( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetDefaultFont( ) : PImFont; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetDragDropPayload( ) : PImGuiPayload; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetDrawData( ) : PImDrawData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetDrawListSharedData( ) : PImDrawListSharedData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetFocusID( ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetFont( ) : PImFont; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetFontSize( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetFontTexUvWhitePixel( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetForegroundDrawList_Nil( ) : PImDrawList; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetForegroundDrawList_ViewportPtr( viewport : PImGuiViewport ) : PImDrawList; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetForegroundDrawList_WindowPtr( window : PImGuiWindow ) : PImDrawList; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetFrameCount( ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetFrameHeight( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetFrameHeightWithSpacing( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetHoveredID( ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetID_Str( str_id : PAnsiChar ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetID_StrStr( str_id_begin : PAnsiChar; str_id_end : PAnsiChar ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetID_Ptr( ptr_id : Pointer ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetIDWithSeed_Str( str_id_begin : PAnsiChar; str_id_end : PAnsiChar; seed : ImGuiID ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetIDWithSeed_Int( n : Integer; seed : ImGuiID ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetIO( ) : PImGuiIO; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetInputTextState( id : ImGuiID ) : PImGuiInputTextState; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetItemFlags( ) : ImGuiItemFlags; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetItemID( ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetItemRectMax( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetItemRectMin( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetItemRectSize( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetItemStatusFlags( ) : ImGuiItemStatusFlags; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetKeyChordName( key_chord : ImGuiKeyChord; out_buf : PAnsiChar; out_buf_size : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetKeyData_ContextPtr( ctx : PImGuiContext; key : ImGuiKey ) : PImGuiKeyData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetKeyData_Key( key : ImGuiKey ) : PImGuiKeyData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetKeyIndex( key : ImGuiKey ) : ImGuiKey; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetKeyMagnitude2d( pOut : PImVec2; key_left : ImGuiKey; key_right : ImGuiKey; key_up : ImGuiKey; key_down : ImGuiKey ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetKeyName( key : ImGuiKey ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetKeyOwner( key : ImGuiKey ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetKeyOwnerData( ctx : PImGuiContext; key : ImGuiKey ) : PImGuiKeyOwnerData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetKeyPressedAmount( key : ImGuiKey; repeat_delay : Single; rate : Single ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetMainViewport( ) : PImGuiViewport; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetMouseClickedCount( button : ImGuiMouseButton ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetMouseCursor( ) : ImGuiMouseCursor; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetMouseDragDelta( pOut : PImVec2; button : ImGuiMouseButton; lock_threshold : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetMousePos( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetMousePosOnOpeningCurrentPopup( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetNavTweakPressedAmount( axis : ImGuiAxis ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetPlatformIO( ) : PImGuiPlatformIO; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetPopupAllowedExtentRect( pOut : PImRect; window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetScrollMaxX( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetScrollMaxY( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetScrollX( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetScrollY( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetShortcutRoutingData( key_chord : ImGuiKeyChord ) : PImGuiKeyRoutingData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetStateStorage( ) : PImGuiStorage; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetStyle( ) : PImGuiStyle; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetStyleColorName( idx : ImGuiCol ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetStyleColorVec4( idx : ImGuiCol ) : PImVec4; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetStyleVarInfo( idx : ImGuiStyleVar ) : PImGuiDataVarInfo; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetTextLineHeight( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetTextLineHeightWithSpacing( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetTime( ) : Double; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetTopMostAndVisiblePopupModal( ) : PImGuiWindow; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetTopMostPopupModal( ) : PImGuiWindow; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetTreeNodeToLabelSpacing( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetTypematicRepeatRate( flags : ImGuiInputFlags; repeat_delay : PSingle; repeat_rate : PSingle ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetTypingSelectRequest( flags : ImGuiTypingSelectFlags ) : PImGuiTypingSelectRequest; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetVersion( ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetViewportPlatformMonitor( viewport : PImGuiViewport ) : PImGuiPlatformMonitor; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetWindowAlwaysWantOwnTabBar( window : PImGuiWindow ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetWindowContentRegionMax( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetWindowContentRegionMin( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetWindowDockID( ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetWindowDockNode( ) : PImGuiDockNode; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetWindowDpiScale( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetWindowDrawList( ) : PImDrawList; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetWindowHeight( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetWindowPos( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetWindowResizeBorderID( window : PImGuiWindow; dir : ImGuiDir ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetWindowResizeCornerID( window : PImGuiWindow; n : Integer ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetWindowScrollbarID( window : PImGuiWindow; axis : ImGuiAxis ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetWindowScrollbarRect( pOut : PImRect; window : PImGuiWindow; axis : ImGuiAxis ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igGetWindowSize( pOut : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetWindowViewport( ) : PImGuiViewport; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igGetWindowWidth( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImAbs_Int( x : Integer ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImAbs_Float( x : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImAbs_double( x : Double ) : Double; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImAlphaBlendColors( col_a : ImU32; col_b : ImU32 ) : ImU32; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImBezierCubicCalc( pOut : PImVec2; p1 : ImVec2; p2 : ImVec2; p3 : ImVec2; p4 : ImVec2; t : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImBezierCubicClosestPoint( pOut : PImVec2; p1 : ImVec2; p2 : ImVec2; p3 : ImVec2; p4 : ImVec2; p : ImVec2; num_segments : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImBezierCubicClosestPointCasteljau( pOut : PImVec2; p1 : ImVec2; p2 : ImVec2; p3 : ImVec2; p4 : ImVec2; p : ImVec2; tess_tol : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImBezierQuadraticCalc( pOut : PImVec2; p1 : ImVec2; p2 : ImVec2; p3 : ImVec2; t : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImBitArrayClearAllBits( arr : PImU32; bitcount : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImBitArrayClearBit( arr : PImU32; n : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImBitArrayGetStorageSizeInBytes( bitcount : Integer ) : size_t; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImBitArraySetBit( arr : PImU32; n : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImBitArraySetBitRange( arr : PImU32; n : Integer; n2 : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImBitArrayTestBit( arr : PImU32; n : Integer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImCharIsBlankA( c : AnsiChar ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImCharIsBlankW( c : ImU32 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImClamp( pOut : PImVec2; v : ImVec2; mn : ImVec2; mx : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImDot( a : ImVec2; b : ImVec2 ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImExponentialMovingAverage( avg : Single; sample : Single; n : Integer ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImFileClose( file_ : ImFileHandle ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImFileGetSize( file_ : ImFileHandle ) : ImU64; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImFileLoadToMemory( filename : PAnsiChar; mode : PAnsiChar; out_file_size : Psize_t; padding_bytes : Integer ) : Pointer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImFileOpen( filename : PAnsiChar; mode : PAnsiChar ) : ImFileHandle; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImFileRead( data : Pointer; size : ImU64; count : ImU64; file_ : ImFileHandle ) : ImU64; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImFileWrite( data : Pointer; size : ImU64; count : ImU64; file_ : ImFileHandle ) : ImU64; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImFloor_Float( f : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFloor_Vec2( pOut : PImVec2; v : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFontAtlasBuildFinish( atlas : PImFontAtlas ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFontAtlasBuildInit( atlas : PImFontAtlas ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFontAtlasBuildMultiplyCalcLookupTable( out_table : PByte; in_multiply_factor : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFontAtlasBuildMultiplyRectAlpha8( table : PByte; pixels : PImU8; x : Integer; y : Integer; w : Integer; h : Integer; stride : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFontAtlasBuildPackCustomRects( atlas : PImFontAtlas; stbrp_context_opaque : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFontAtlasBuildRender32bppRectFromString( atlas : PImFontAtlas; x : Integer; y : Integer; w : Integer; h : Integer; in_str : PAnsiChar; in_marker_char : AnsiChar; in_marker_pixel_value : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFontAtlasBuildRender8bppRectFromString( atlas : PImFontAtlas; x : Integer; y : Integer; w : Integer; h : Integer; in_str : PAnsiChar; in_marker_char : AnsiChar; in_marker_pixel_value : ImU8 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFontAtlasBuildSetupFont( atlas : PImFontAtlas; font : PImFont; font_config : PImFontConfig; ascent : Single; descent : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImFontAtlasGetBuilderForStbTruetype( ) : PImFontBuilderIO; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFontAtlasUpdateConfigDataPointers( atlas : PImFontAtlas ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImFormatString( buf : PAnsiChar; buf_size : size_t; fmt : PAnsiChar; args : array of const ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFormatStringToTempBuffer( out_buf : PPAnsiChar; out_buf_end : PPAnsiChar; fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImFormatStringToTempBufferV( out_buf : PPAnsiChar; out_buf_end : PPAnsiChar; fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImFormatStringV( buf : PAnsiChar; buf_size : size_t; fmt : PAnsiChar; args : array of const ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImHashData( data : Pointer; data_size : size_t; seed : ImGuiID ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImHashStr( data : PAnsiChar; data_size : size_t; seed : ImGuiID ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImInvLength( lhs : ImVec2; fail_value : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImIsFloatAboveGuaranteedIntegerPrecision( f : Single ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImIsPowerOfTwo_Int( v : Integer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImIsPowerOfTwo_U64( v : ImU64 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImLengthSqr_Vec2( lhs : ImVec2 ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImLengthSqr_Vec4( lhs : ImVec4 ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImLerp_Vec2Float( pOut : PImVec2; a : ImVec2; b : ImVec2; t : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImLerp_Vec2Vec2( pOut : PImVec2; a : ImVec2; b : ImVec2; t : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImLerp_Vec4( pOut : PImVec4; a : ImVec4; b : ImVec4; t : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImLineClosestPoint( pOut : PImVec2; a : ImVec2; b : ImVec2; p : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImLinearSweep( current : Single; target : Single; speed : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImLog_Float( x : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImLog_double( x : Double ) : Double; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImMax( pOut : PImVec2; lhs : ImVec2; rhs : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImMin( pOut : PImVec2; lhs : ImVec2; rhs : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImModPositive( a : Integer; b : Integer ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImMul( pOut : PImVec2; lhs : ImVec2; rhs : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImParseFormatFindEnd( format : PAnsiChar ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImParseFormatFindStart( format : PAnsiChar ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImParseFormatPrecision( format : PAnsiChar; default_value : Integer ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImParseFormatSanitizeForPrinting( fmt_in : PAnsiChar; fmt_out : PAnsiChar; fmt_out_size : size_t ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImParseFormatSanitizeForScanning( fmt_in : PAnsiChar; fmt_out : PAnsiChar; fmt_out_size : size_t ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImParseFormatTrimDecorations( format : PAnsiChar; buf : PAnsiChar; buf_size : size_t ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImPow_Float( x : Single; y : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImPow_double( x : Double; y : Double ) : Double; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImQsort( base : Pointer; count : size_t; size_of_element : size_t; compare_func : TCompareFunc ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImRotate( pOut : PImVec2; v : ImVec2; cos_a : Single; sin_a : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImRsqrt_Float( x : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImRsqrt_double( x : Double ) : Double; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImSaturate( f : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImSign_Float( x : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImSign_double( x : Double ) : Double; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImStrSkipBlank( str : PAnsiChar ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImStrTrimBlanks( str : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImStrbolW( buf_mid_line : PImWchar; buf_begin : PImWchar ) : PImWchar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImStrchrRange( str_begin : PAnsiChar; str_end : PAnsiChar; c : AnsiChar ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImStrdup( str : PAnsiChar ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImStrdupcpy( dst : PAnsiChar; p_dst_size : Psize_t; str : PAnsiChar ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImStreolRange( str : PAnsiChar; str_end : PAnsiChar ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImStricmp( str1 : PAnsiChar; str2 : PAnsiChar ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImStristr( haystack : PAnsiChar; haystack_end : PAnsiChar; needle : PAnsiChar; needle_end : PAnsiChar ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImStrlenW( str : PImWchar ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImStrncpy( dst : PAnsiChar; src : PAnsiChar; count : size_t ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImStrnicmp( str1 : PAnsiChar; str2 : PAnsiChar; count : size_t ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImTextCharFromUtf8( out_char : PImU32; in_text : PAnsiChar; in_text_end : PAnsiChar ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImTextCharToUtf8( out_buf : PAnsiChar; c : ImU32 ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImTextCountCharsFromUtf8( in_text : PAnsiChar; in_text_end : PAnsiChar ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImTextCountUtf8BytesFromChar( in_text : PAnsiChar; in_text_end : PAnsiChar ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImTextCountUtf8BytesFromStr( in_text : PImWchar; in_text_end : PImWchar ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImTextFindPreviousUtf8Codepoint( in_text_start : PAnsiChar; in_text_curr : PAnsiChar ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImTextStrFromUtf8( out_buf : PImWchar; out_buf_size : Integer; in_text : PAnsiChar; in_text_end : PAnsiChar; in_remaining : PPAnsiChar ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImTextStrToUtf8( out_buf : PAnsiChar; out_buf_size : Integer; in_text : PImWchar; in_text_end : PImWchar ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImToUpper( c : AnsiChar ) : AnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImTriangleArea( a : ImVec2; b : ImVec2; c : ImVec2 ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImTriangleBarycentricCoords( a : ImVec2; b : ImVec2; c : ImVec2; p : ImVec2; out_u : PSingle; out_v : PSingle; out_w : PSingle ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImTriangleClosestPoint( pOut : PImVec2; a : ImVec2; b : ImVec2; c : ImVec2; p : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImTriangleContainsPoint( a : ImVec2; b : ImVec2; c : ImVec2; p : ImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImTrunc_Float( f : Single ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImTrunc_Vec2( pOut : PImVec2; v : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImUpperPowerOfTwo( v : Integer ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igImage( user_texture_id : ImTextureID; size : ImVec2; uv0 : ImVec2; uv1 : ImVec2; tint_col : ImVec4; border_col : ImVec4 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImageButton( str_id : PAnsiChar; user_texture_id : ImTextureID; image_size : ImVec2; uv0 : ImVec2; uv1 : ImVec2; bg_col : ImVec4; tint_col : ImVec4 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igImageButtonEx( id : ImGuiID; texture_id : ImTextureID; image_size : ImVec2; uv0 : ImVec2; uv1 : ImVec2; bg_col : ImVec4; tint_col : ImVec4; flags : ImGuiButtonFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igIndent( indent_w : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igInitialize( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputDouble( label_ : PAnsiChar; v : PDouble; step : Double; step_fast : Double; format : PAnsiChar; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputFloat( label_ : PAnsiChar; v : PSingle; step : Single; step_fast : Single; format : PAnsiChar; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputFloat2( label_ : PAnsiChar; v : PSingle; format : PAnsiChar; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputFloat3( label_ : PAnsiChar; v : PSingle; format : PAnsiChar; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputFloat4( label_ : PAnsiChar; v : PSingle; format : PAnsiChar; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputInt( label_ : PAnsiChar; v : PInteger; step : Integer; step_fast : Integer; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputInt2( label_ : PAnsiChar; v : PInteger; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputInt3( label_ : PAnsiChar; v : PInteger; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputInt4( label_ : PAnsiChar; v : PInteger; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputScalar( label_ : PAnsiChar; data_type : ImGuiDataType; p_data : Pointer; p_step : Pointer; p_step_fast : Pointer; format : PAnsiChar; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputScalarN( label_ : PAnsiChar; data_type : ImGuiDataType; p_data : Pointer; components : Integer; p_step : Pointer; p_step_fast : Pointer; format : PAnsiChar; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputText( label_ : PAnsiChar; buf : PAnsiChar; buf_size : size_t; flags : ImGuiInputTextFlags; callback : ImGuiInputTextCallback; user_data : Pointer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igInputTextDeactivateHook( id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputTextEx( label_ : PAnsiChar; hint : PAnsiChar; buf : PAnsiChar; buf_size : Integer; size_arg : ImVec2; flags : ImGuiInputTextFlags; callback : ImGuiInputTextCallback; user_data : Pointer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputTextMultiline( label_ : PAnsiChar; buf : PAnsiChar; buf_size : size_t; size : ImVec2; flags : ImGuiInputTextFlags; callback : ImGuiInputTextCallback; user_data : Pointer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInputTextWithHint( label_ : PAnsiChar; hint : PAnsiChar; buf : PAnsiChar; buf_size : size_t; flags : ImGuiInputTextFlags; callback : ImGuiInputTextCallback; user_data : Pointer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igInvisibleButton( str_id : PAnsiChar; size : ImVec2; flags : ImGuiButtonFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsActiveIdUsingNavDir( dir : ImGuiDir ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsAliasKey( key : ImGuiKey ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsAnyItemActive( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsAnyItemFocused( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsAnyItemHovered( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsAnyMouseDown( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsClippedEx( bb : ImRect; id : ImGuiID ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsDragDropActive( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsDragDropPayloadBeingAccepted( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsGamepadKey( key : ImGuiKey ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsItemActivated( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsItemActive( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsItemClicked( mouse_button : ImGuiMouseButton ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsItemDeactivated( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsItemDeactivatedAfterEdit( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsItemEdited( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsItemFocused( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsItemHovered( flags : ImGuiHoveredFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsItemToggledOpen( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsItemToggledSelection( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsItemVisible( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsKeyChordPressed_Nil( key_chord : ImGuiKeyChord ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsKeyChordPressed_ID( key_chord : ImGuiKeyChord; owner_id : ImGuiID; flags : ImGuiInputFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsKeyDown_Nil( key : ImGuiKey ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsKeyDown_ID( key : ImGuiKey; owner_id : ImGuiID ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsKeyPressed_Bool( key : ImGuiKey; repeat_ : Boolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsKeyPressed_ID( key : ImGuiKey; owner_id : ImGuiID; flags : ImGuiInputFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsKeyReleased_Nil( key : ImGuiKey ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsKeyReleased_ID( key : ImGuiKey; owner_id : ImGuiID ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsKeyboardKey( key : ImGuiKey ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsLegacyKey( key : ImGuiKey ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseClicked_Bool( button : ImGuiMouseButton; repeat_ : Boolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseClicked_ID( button : ImGuiMouseButton; owner_id : ImGuiID; flags : ImGuiInputFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseDoubleClicked_Nil( button : ImGuiMouseButton ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseDoubleClicked_ID( button : ImGuiMouseButton; owner_id : ImGuiID ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseDown_Nil( button : ImGuiMouseButton ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseDown_ID( button : ImGuiMouseButton; owner_id : ImGuiID ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseDragPastThreshold( button : ImGuiMouseButton; lock_threshold : Single ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseDragging( button : ImGuiMouseButton; lock_threshold : Single ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseHoveringRect( r_min : ImVec2; r_max : ImVec2; clip : Boolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseKey( key : ImGuiKey ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMousePosValid( mouse_pos : PImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseReleased_Nil( button : ImGuiMouseButton ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsMouseReleased_ID( button : ImGuiMouseButton; owner_id : ImGuiID ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsNamedKey( key : ImGuiKey ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsNamedKeyOrModKey( key : ImGuiKey ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsPopupOpen_Str( str_id : PAnsiChar; flags : ImGuiPopupFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsPopupOpen_ID( id : ImGuiID; popup_flags : ImGuiPopupFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsRectVisible_Nil( size : ImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsRectVisible_Vec2( rect_min : ImVec2; rect_max : ImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsWindowAbove( potential_above : PImGuiWindow; potential_below : PImGuiWindow ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsWindowAppearing( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsWindowChildOf( window : PImGuiWindow; potential_parent : PImGuiWindow; popup_hierarchy : Boolean; dock_hierarchy : Boolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsWindowCollapsed( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsWindowContentHoverable( window : PImGuiWindow; flags : ImGuiHoveredFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsWindowDocked( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsWindowFocused( flags : ImGuiFocusedFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsWindowHovered( flags : ImGuiHoveredFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsWindowNavFocusable( window : PImGuiWindow ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igIsWindowWithinBeginStackOf( window : PImGuiWindow; potential_parent : PImGuiWindow ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igItemAdd( bb : ImRect; id : ImGuiID; nav_bb : PImRect; extra_flags : ImGuiItemFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igItemHoverable( bb : ImRect; id : ImGuiID; item_flags : ImGuiItemFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igItemSize_Vec2( size : ImVec2; text_baseline_y : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igItemSize_Rect( bb : ImRect; text_baseline_y : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igKeepAliveID( id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLabelText( label_ : PAnsiChar; fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLabelTextV( label_ : PAnsiChar; fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igListBox_Str_arr( label_ : PAnsiChar; current_item : PInteger; items : PPAnsiChar; items_count : Integer; height_in_items : Integer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igListBox_FnStrPtr( label_ : PAnsiChar; current_item : PInteger; getter : TImGuiComboItemsGetterFunc ;user_data : Pointer; items_count : Integer; height_in_items : Integer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLoadIniSettingsFromDisk( ini_filename : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLoadIniSettingsFromMemory( ini_data : PAnsiChar; ini_size : size_t ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igLocalizeGetMsg( key : ImGuiLocKey ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLocalizeRegisterEntries( entries : PImGuiLocEntry; count : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLogBegin( type_ : ImGuiLogType; auto_open_depth : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLogButtons( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLogFinish( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLogRenderedText( ref_pos : PImVec2; text : PAnsiChar; text_end : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLogSetNextTextDecoration( prefix : PAnsiChar; suffix : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLogText( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLogTextV( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLogToBuffer( auto_open_depth : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLogToClipboard( auto_open_depth : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLogToFile( auto_open_depth : Integer; filename : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igLogToTTY( auto_open_depth : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igMarkIniSettingsDirty_Nil( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igMarkIniSettingsDirty_WindowPtr( window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igMarkItemEdited( id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igMemAlloc( size : size_t ) : Pointer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igMemFree( ptr : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igMenuItem_Bool( label_ : PAnsiChar; shortcut : PAnsiChar; selected : Boolean; enabled : Boolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igMenuItem_BoolPtr( label_ : PAnsiChar; shortcut : PAnsiChar; p_selected : PBoolean; enabled : Boolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igMenuItemEx( label_ : PAnsiChar; icon : PAnsiChar; shortcut : PAnsiChar; selected : Boolean; enabled : Boolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igMouseButtonToKey( button : ImGuiMouseButton ) : ImGuiKey; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavClearPreferredPosForAxis( axis : ImGuiAxis ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavInitRequestApplyResult( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavInitWindow( window : PImGuiWindow; force_reinit : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavMoveRequestApplyResult( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igNavMoveRequestButNoResultYet( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavMoveRequestCancel( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavMoveRequestForward( move_dir : ImGuiDir; clip_dir : ImGuiDir; move_flags : ImGuiNavMoveFlags; scroll_flags : ImGuiScrollFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavMoveRequestResolveWithLastItem( result : PImGuiNavItemData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavMoveRequestResolveWithPastTreeNode( result : PImGuiNavItemData; tree_node_data : PImGuiNavTreeNodeData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavMoveRequestSubmit( move_dir : ImGuiDir; clip_dir : ImGuiDir; move_flags : ImGuiNavMoveFlags; scroll_flags : ImGuiScrollFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavMoveRequestTryWrapping( window : PImGuiWindow; move_flags : ImGuiNavMoveFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavRestoreHighlightAfterMove( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNavUpdateCurrentWindowIsScrollPushableX( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNewFrame( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNewLine( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igNextColumn( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igOpenPopup_Str( str_id : PAnsiChar; popup_flags : ImGuiPopupFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igOpenPopup_ID( id : ImGuiID; popup_flags : ImGuiPopupFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igOpenPopupEx( id : ImGuiID; popup_flags : ImGuiPopupFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igOpenPopupOnItemClick( str_id : PAnsiChar; popup_flags : ImGuiPopupFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igPlotEx( plot_type : ImGuiPlotType; label_ : PAnsiChar; values_getter : TImGuiPlotValuesGetterFunc ;data : Pointer; values_count : Integer; values_offset : Integer; overlay_text : PAnsiChar; scale_min : Single; scale_max : Single; size_arg : ImVec2 ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPlotHistogram_FloatPtr( label_ : PAnsiChar; values : PSingle; values_count : Integer; values_offset : Integer; overlay_text : PAnsiChar; scale_min : Single; scale_max : Single; graph_size : ImVec2; stride : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPlotHistogram_FnFloatPtr( label_ : PAnsiChar; values_getter : TImGuiPlotValuesGetterFunc ;data : Pointer; values_count : Integer; values_offset : Integer; overlay_text : PAnsiChar; scale_min : Single; scale_max : Single; graph_size : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPlotLines_FloatPtr( label_ : PAnsiChar; values : PSingle; values_count : Integer; values_offset : Integer; overlay_text : PAnsiChar; scale_min : Single; scale_max : Single; graph_size : ImVec2; stride : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPlotLines_FnFloatPtr( label_ : PAnsiChar; values_getter : TImGuiPlotValuesGetterFunc ;data : Pointer; values_count : Integer; values_offset : Integer; overlay_text : PAnsiChar; scale_min : Single; scale_max : Single; graph_size : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopButtonRepeat( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopClipRect( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopColumnsBackground( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopFocusScope( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopFont( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopID( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopItemFlag( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopItemWidth( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopStyleColor( count : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopStyleVar( count : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopTabStop( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPopTextWrapPos( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igProgressBar( fraction : Single; size_arg : ImVec2; overlay : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushButtonRepeat( repeat_ : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushClipRect( clip_rect_min : ImVec2; clip_rect_max : ImVec2; intersect_with_current_clip_rect : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushColumnClipRect( column_index : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushColumnsBackground( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushFocusScope( id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushFont( font : PImFont ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushID_Str( str_id : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushID_StrStr( str_id_begin : PAnsiChar; str_id_end : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushID_Ptr( ptr_id : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushID_Int( int_id : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushItemFlag( option : ImGuiItemFlags; enabled : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushItemWidth( item_width : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushMultiItemsWidths( components : Integer; width_full : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushOverrideID( id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushStyleColor_U32( idx : ImGuiCol; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushStyleColor_Vec4( idx : ImGuiCol; col : ImVec4 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushStyleVar_Float( idx : ImGuiStyleVar; val : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushStyleVar_Vec2( idx : ImGuiStyleVar; val : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushTabStop( tab_stop : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igPushTextWrapPos( wrap_local_pos_x : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igRadioButton_Bool( label_ : PAnsiChar; active : Boolean ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igRadioButton_IntPtr( label_ : PAnsiChar; v : PInteger; v_button : Integer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRemoveContextHook( context : PImGuiContext; hook_to_remove : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRemoveSettingsHandler( type_name : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRender( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderArrow( draw_list : PImDrawList; pos : ImVec2; col : ImU32; dir : ImGuiDir; scale : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderArrowDockMenu( draw_list : PImDrawList; p_min : ImVec2; sz : Single; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderArrowPointingAt( draw_list : PImDrawList; pos : ImVec2; half_sz : ImVec2; direction : ImGuiDir; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderBullet( draw_list : PImDrawList; pos : ImVec2; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderCheckMark( draw_list : PImDrawList; pos : ImVec2; col : ImU32; sz : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderColorRectWithAlphaCheckerboard( draw_list : PImDrawList; p_min : ImVec2; p_max : ImVec2; fill_col : ImU32; grid_step : Single; grid_off : ImVec2; rounding : Single; flags : ImDrawFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderDragDropTargetRect( bb : ImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderFrame( p_min : ImVec2; p_max : ImVec2; fill_col : ImU32; border : Boolean; rounding : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderFrameBorder( p_min : ImVec2; p_max : ImVec2; rounding : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderMouseCursor( pos : ImVec2; scale : Single; mouse_cursor : ImGuiMouseCursor; col_fill : ImU32; col_border : ImU32; col_shadow : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderNavHighlight( bb : ImRect; id : ImGuiID; flags : ImGuiNavHighlightFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderPlatformWindowsDefault( platform_render_arg : Pointer; renderer_render_arg : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderRectFilledRangeH( draw_list : PImDrawList; rect : ImRect; col : ImU32; x_start_norm : Single; x_end_norm : Single; rounding : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderRectFilledWithHole( draw_list : PImDrawList; outer : ImRect; inner : ImRect; col : ImU32; rounding : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderText( pos : ImVec2; text : PAnsiChar; text_end : PAnsiChar; hide_text_after_hash : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderTextClipped( pos_min : ImVec2; pos_max : ImVec2; text : PAnsiChar; text_end : PAnsiChar; text_size_if_known : PImVec2; align : ImVec2; clip_rect : PImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderTextClippedEx( draw_list : PImDrawList; pos_min : ImVec2; pos_max : ImVec2; text : PAnsiChar; text_end : PAnsiChar; text_size_if_known : PImVec2; align : ImVec2; clip_rect : PImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderTextEllipsis( draw_list : PImDrawList; pos_min : ImVec2; pos_max : ImVec2; clip_max_x : Single; ellipsis_max_x : Single; text : PAnsiChar; text_end : PAnsiChar; text_size_if_known : PImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igRenderTextWrapped( pos : ImVec2; text : PAnsiChar; text_end : PAnsiChar; wrap_width : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igResetMouseDragDelta( button : ImGuiMouseButton ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSameLine( offset_from_start_x : Single; spacing : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSaveIniSettingsToDisk( ini_filename : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSaveIniSettingsToMemory( out_ini_size : Psize_t ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igScaleWindowsInViewport( viewport : PImGuiViewportP; scale : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igScrollToBringRectIntoView( window : PImGuiWindow; rect : ImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igScrollToItem( flags : ImGuiScrollFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igScrollToRect( window : PImGuiWindow; rect : ImRect; flags : ImGuiScrollFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igScrollToRectEx( pOut : PImVec2; window : PImGuiWindow; rect : ImRect; flags : ImGuiScrollFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igScrollbar( axis : ImGuiAxis ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igScrollbarEx( bb : ImRect; id : ImGuiID; axis : ImGuiAxis; p_scroll_v : PImS64; avail_v : ImS64; contents_v : ImS64; flags : ImDrawFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSelectable_Bool( label_ : PAnsiChar; selected : Boolean; flags : ImGuiSelectableFlags; size : ImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSelectable_BoolPtr( label_ : PAnsiChar; p_selected : PBoolean; flags : ImGuiSelectableFlags; size : ImVec2 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSeparator( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSeparatorEx( flags : ImGuiSeparatorFlags; thickness : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSeparatorText( label_ : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSeparatorTextEx( id : ImGuiID; label_ : PAnsiChar; label_end : PAnsiChar; extra_width : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetActiveID( id : ImGuiID; window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetActiveIdUsingAllKeyboardKeys( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetAllocatorFunctions( alloc_func : ImGuiMemAllocFunc; free_func : ImGuiMemFreeFunc; user_data : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetClipboardText( text : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetColorEditOptions( flags : ImGuiColorEditFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetColumnOffset( column_index : Integer; offset_x : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetColumnWidth( column_index : Integer; width : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetCurrentContext( ctx : PImGuiContext ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetCurrentFont( font : PImFont ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetCurrentViewport( window : PImGuiWindow; viewport : PImGuiViewportP ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetCursorPos( local_pos : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetCursorPosX( local_x : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetCursorPosY( local_y : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetCursorScreenPos( pos : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSetDragDropPayload( type_ : PAnsiChar; data : Pointer; sz : size_t; cond : ImGuiCond ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetFocusID( id : ImGuiID; window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetHoveredID( id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetItemDefaultFocus( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetItemKeyOwner( key : ImGuiKey; flags : ImGuiInputFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetItemTooltip( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetItemTooltipV( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetKeyOwner( key : ImGuiKey; owner_id : ImGuiID; flags : ImGuiInputFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetKeyOwnersForKeyChord( key : ImGuiKeyChord; owner_id : ImGuiID; flags : ImGuiInputFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetKeyboardFocusHere( offset : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetLastItemData( item_id : ImGuiID; in_flags : ImGuiItemFlags; status_flags : ImGuiItemStatusFlags; item_rect : ImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetMouseCursor( cursor_type : ImGuiMouseCursor ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNavID( id : ImGuiID; nav_layer : ImGuiNavLayer; focus_scope_id : ImGuiID; rect_rel : ImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNavWindow( window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextFrameWantCaptureKeyboard( want_capture_keyboard : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextFrameWantCaptureMouse( want_capture_mouse : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextItemAllowOverlap( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextItemOpen( is_open : Boolean; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextItemSelectionUserData( selection_user_data : ImGuiSelectionUserData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextItemWidth( item_width : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextWindowBgAlpha( alpha : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextWindowClass( window_class : PImGuiWindowClass ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextWindowCollapsed( collapsed : Boolean; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextWindowContentSize( size : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextWindowDockID( dock_id : ImGuiID; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextWindowFocus( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextWindowPos( pos : ImVec2; cond : ImGuiCond; pivot : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextWindowScroll( scroll : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextWindowSize( size : ImVec2; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextWindowSizeConstraints( size_min : ImVec2; size_max : ImVec2; custom_callback : ImGuiSizeCallback; custom_callback_data : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetNextWindowViewport( viewport_id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetScrollFromPosX_Float( local_x : Single; center_x_ratio : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetScrollFromPosX_WindowPtr( window : PImGuiWindow; local_x : Single; center_x_ratio : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetScrollFromPosY_Float( local_y : Single; center_y_ratio : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetScrollFromPosY_WindowPtr( window : PImGuiWindow; local_y : Single; center_y_ratio : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetScrollHereX( center_x_ratio : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetScrollHereY( center_y_ratio : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetScrollX_Float( scroll_x : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetScrollX_WindowPtr( window : PImGuiWindow; scroll_x : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetScrollY_Float( scroll_y : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetScrollY_WindowPtr( window : PImGuiWindow; scroll_y : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSetShortcutRouting( key_chord : ImGuiKeyChord; owner_id : ImGuiID; flags : ImGuiInputFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetStateStorage( storage : PImGuiStorage ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetTabItemClosed( tab_or_docked_window_label : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetTooltip( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetTooltipV( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowClipRectBeforeSetChannel( window : PImGuiWindow; clip_rect : ImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowCollapsed_Bool( collapsed : Boolean; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowCollapsed_Str( name : PAnsiChar; collapsed : Boolean; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowCollapsed_WindowPtr( window : PImGuiWindow; collapsed : Boolean; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowDock( window : PImGuiWindow; dock_id : ImGuiID; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowFocus_Nil( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowFocus_Str( name : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowFontScale( scale : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowHiddendAndSkipItemsForCurrentFrame( window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowHitTestHole( window : PImGuiWindow; pos : ImVec2; size : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowPos_Vec2( pos : ImVec2; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowPos_Str( name : PAnsiChar; pos : ImVec2; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowPos_WindowPtr( window : PImGuiWindow; pos : ImVec2; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowSize_Vec2( size : ImVec2; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowSize_Str( name : PAnsiChar; size : ImVec2; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowSize_WindowPtr( window : PImGuiWindow; size : ImVec2; cond : ImGuiCond ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSetWindowViewport( window : PImGuiWindow; viewport : PImGuiViewportP ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShadeVertsLinearColorGradientKeepAlpha( draw_list : PImDrawList; vert_start_idx : Integer; vert_end_idx : Integer; gradient_p0 : ImVec2; gradient_p1 : ImVec2; col0 : ImU32; col1 : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShadeVertsLinearUV( draw_list : PImDrawList; vert_start_idx : Integer; vert_end_idx : Integer; a : ImVec2; b : ImVec2; uv_a : ImVec2; uv_b : ImVec2; clamp : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShadeVertsTransformPos( draw_list : PImDrawList; vert_start_idx : Integer; vert_end_idx : Integer; pivot_in : ImVec2; cos_a : Single; sin_a : Single; pivot_out : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igShortcut( key_chord : ImGuiKeyChord; owner_id : ImGuiID; flags : ImGuiInputFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShowAboutWindow( p_open : PBoolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShowDebugLogWindow( p_open : PBoolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShowDemoWindow( p_open : PBoolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShowFontAtlas( atlas : PImFontAtlas ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShowFontSelector( label_ : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShowIDStackToolWindow( p_open : PBoolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShowMetricsWindow( p_open : PBoolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShowStyleEditor( ref : PImGuiStyle ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igShowStyleSelector( label_ : PAnsiChar ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShowUserGuide( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShrinkWidths( items : PImGuiShrinkWidthItem; count : Integer; width_excess : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igShutdown( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderAngle( label_ : PAnsiChar; v_rad : PSingle; v_degrees_min : Single; v_degrees_max : Single; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderBehavior( bb : ImRect; id : ImGuiID; data_type : ImGuiDataType; p_v : Pointer; p_min : Pointer; p_max : Pointer; format : PAnsiChar; flags : ImGuiSliderFlags; out_grab_bb : PImRect ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderFloat( label_ : PAnsiChar; v : PSingle; v_min : Single; v_max : Single; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderFloat2( label_ : PAnsiChar; v : PSingle; v_min : Single; v_max : Single; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderFloat3( label_ : PAnsiChar; v : PSingle; v_min : Single; v_max : Single; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderFloat4( label_ : PAnsiChar; v : PSingle; v_min : Single; v_max : Single; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderInt( label_ : PAnsiChar; v : PInteger; v_min : Integer; v_max : Integer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderInt2( label_ : PAnsiChar; v : PInteger; v_min : Integer; v_max : Integer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderInt3( label_ : PAnsiChar; v : PInteger; v_min : Integer; v_max : Integer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderInt4( label_ : PAnsiChar; v : PInteger; v_min : Integer; v_max : Integer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderScalar( label_ : PAnsiChar; data_type : ImGuiDataType; p_data : Pointer; p_min : Pointer; p_max : Pointer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSliderScalarN( label_ : PAnsiChar; data_type : ImGuiDataType; p_data : Pointer; components : Integer; p_min : Pointer; p_max : Pointer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSmallButton( label_ : PAnsiChar ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igSpacing( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igSplitterBehavior( bb : ImRect; id : ImGuiID; axis : ImGuiAxis; size1 : PSingle; size2 : PSingle; min_size1 : Single; min_size2 : Single; hover_extend : Single; hover_visibility_delay : Single; bg_col : ImU32 ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igStartMouseMovingWindow( window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igStartMouseMovingWindowOrNode( window : PImGuiWindow; node : PImGuiDockNode; undock : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igStyleColorsClassic( dst : PImGuiStyle ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igStyleColorsDark( dst : PImGuiStyle ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igStyleColorsLight( dst : PImGuiStyle ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTabBarAddTab( tab_bar : PImGuiTabBar; tab_flags : ImGuiTabItemFlags; window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTabBarCloseTab( tab_bar : PImGuiTabBar; tab : PImGuiTabItem ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTabBarFindMostRecentlySelectedTabForActiveWindow( tab_bar : PImGuiTabBar ) : PImGuiTabItem; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTabBarFindTabByID( tab_bar : PImGuiTabBar; tab_id : ImGuiID ) : PImGuiTabItem; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTabBarFindTabByOrder( tab_bar : PImGuiTabBar; order : Integer ) : PImGuiTabItem; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTabBarGetCurrentTab( tab_bar : PImGuiTabBar ) : PImGuiTabItem; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTabBarGetTabName( tab_bar : PImGuiTabBar; tab : PImGuiTabItem ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTabBarGetTabOrder( tab_bar : PImGuiTabBar; tab : PImGuiTabItem ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTabBarProcessReorder( tab_bar : PImGuiTabBar ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTabBarQueueFocus( tab_bar : PImGuiTabBar; tab : PImGuiTabItem ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTabBarQueueReorder( tab_bar : PImGuiTabBar; tab : PImGuiTabItem; offset : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTabBarQueueReorderFromMousePos( tab_bar : PImGuiTabBar; tab : PImGuiTabItem; mouse_pos : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTabBarRemoveTab( tab_bar : PImGuiTabBar; tab_id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTabItemBackground( draw_list : PImDrawList; bb : ImRect; flags : ImGuiTabItemFlags; col : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTabItemButton( label_ : PAnsiChar; flags : ImGuiTabItemFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTabItemCalcSize_Str( pOut : PImVec2; label_ : PAnsiChar; has_close_button_or_unsaved_marker : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTabItemCalcSize_WindowPtr( pOut : PImVec2; window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTabItemEx( tab_bar : PImGuiTabBar; label_ : PAnsiChar; p_open : PBoolean; flags : ImGuiTabItemFlags; docked_window : PImGuiWindow ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTabItemLabelAndCloseButton( draw_list : PImDrawList; bb : ImRect; flags : ImGuiTabItemFlags; frame_padding : ImVec2; label_ : PAnsiChar; tab_id : ImGuiID; close_button_id : ImGuiID; is_contents_visible : Boolean; out_just_closed : PBoolean; out_text_clipped : PBoolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableAngledHeadersRow( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableAngledHeadersRowEx( angle : Single; label_width : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableBeginApplyRequests( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableBeginCell( table : PImGuiTable; column_n : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableBeginContextMenuPopup( table : PImGuiTable ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableBeginInitMemory( table : PImGuiTable; columns_count : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableBeginRow( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableDrawBorders( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableDrawDefaultContextMenu( table : PImGuiTable; flags_for_section_to_display : ImGuiTableFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableEndCell( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableEndRow( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableFindByID( id : ImGuiID ) : PImGuiTable; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableFixColumnSortDirection( table : PImGuiTable; column : PImGuiTableColumn ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableGcCompactSettings( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableGcCompactTransientBuffers_TablePtr( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableGcCompactTransientBuffers_TableTempDataPtr( table : PImGuiTableTempData ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetBoundSettings( table : PImGuiTable ) : PImGuiTableSettings; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableGetCellBgRect( pOut : PImRect; table : PImGuiTable; column_n : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetColumnCount( ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetColumnFlags( column_n : Integer ) : ImGuiTableColumnFlags; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetColumnIndex( ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetColumnName_Int( column_n : Integer ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetColumnName_TablePtr( table : PImGuiTable; column_n : Integer ) : PAnsiChar; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetColumnNextSortDirection( column : PImGuiTableColumn ) : ImGuiSortDirection; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetColumnResizeID( table : PImGuiTable; column_n : Integer; instance_no : Integer ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetColumnWidthAuto( table : PImGuiTable; column : PImGuiTableColumn ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetHeaderAngledMaxLabelWidth( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetHeaderRowHeight( ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetHoveredColumn( ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetHoveredRow( ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetInstanceData( table : PImGuiTable; instance_no : Integer ) : PImGuiTableInstanceData; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetInstanceID( table : PImGuiTable; instance_no : Integer ) : ImGuiID; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetMaxColumnWidth( table : PImGuiTable; column_n : Integer ) : Single; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetRowIndex( ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableGetSortSpecs( ) : PImGuiTableSortSpecs; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableHeader( label_ : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableHeadersRow( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableLoadSettings( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableMergeDrawChannels( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableNextColumn( ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableNextRow( row_flags : ImGuiTableRowFlags; min_row_height : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableOpenContextMenu( column_n : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTablePopBackgroundChannel( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTablePushBackgroundChannel( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableRemove( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableResetSettings( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSaveSettings( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSetBgColor( target : ImGuiTableBgTarget; color : ImU32; column_n : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSetColumnEnabled( column_n : Integer; v : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableSetColumnIndex( column_n : Integer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSetColumnSortDirection( column_n : Integer; sort_direction : ImGuiSortDirection; append_to_sort_specs : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSetColumnWidth( column_n : Integer; width : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSetColumnWidthAutoAll( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSetColumnWidthAutoSingle( table : PImGuiTable; column_n : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSettingsAddSettingsHandler( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableSettingsCreate( id : ImGuiID; columns_count : Integer ) : PImGuiTableSettings; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTableSettingsFindByID( id : ImGuiID ) : PImGuiTableSettings; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSetupColumn( label_ : PAnsiChar; flags : ImGuiTableColumnFlags; init_width_or_weight : Single; user_id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSetupDrawChannels( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSetupScrollFreeze( cols : Integer; rows : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSortSpecsBuild( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableSortSpecsSanitize( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableUpdateBorders( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableUpdateColumnsWeightFromWidth( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTableUpdateLayout( table : PImGuiTable ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTeleportMousePos( pos : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTempInputIsActive( id : ImGuiID ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTempInputScalar( bb : ImRect; id : ImGuiID; label_ : PAnsiChar; data_type : ImGuiDataType; p_data : Pointer; format : PAnsiChar; p_clamp_min : Pointer; p_clamp_max : Pointer ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTempInputText( bb : ImRect; id : ImGuiID; label_ : PAnsiChar; buf : PAnsiChar; buf_size : Integer; flags : ImGuiInputTextFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTestKeyOwner( key : ImGuiKey; owner_id : ImGuiID ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTestShortcutRouting( key_chord : ImGuiKeyChord; owner_id : ImGuiID ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igText( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTextColored( col : ImVec4; fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTextColoredV( col : ImVec4; fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTextDisabled( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTextDisabledV( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTextEx( text : PAnsiChar; text_end : PAnsiChar; flags : ImGuiTextFlags ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTextUnformatted( text : PAnsiChar; text_end : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTextV( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTextWrapped( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTextWrappedV( fmt : PAnsiChar; args : array of const ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTranslateWindowsInViewport( viewport : PImGuiViewportP; old_pos : ImVec2; new_pos : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNode_Str( label_ : PAnsiChar ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNode_StrStr( str_id : PAnsiChar; fmt : PAnsiChar; args : array of const ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNode_Ptr( ptr_id : Pointer; fmt : PAnsiChar; args : array of const ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNodeBehavior( id : ImGuiID; flags : ImGuiTreeNodeFlags; label_ : PAnsiChar; label_end : PAnsiChar ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNodeEx_Str( label_ : PAnsiChar; flags : ImGuiTreeNodeFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNodeEx_StrStr( str_id : PAnsiChar; flags : ImGuiTreeNodeFlags; fmt : PAnsiChar; args : array of const ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNodeEx_Ptr( ptr_id : Pointer; flags : ImGuiTreeNodeFlags; fmt : PAnsiChar; args : array of const ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNodeExV_Str( str_id : PAnsiChar; flags : ImGuiTreeNodeFlags; fmt : PAnsiChar; args : array of const ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNodeExV_Ptr( ptr_id : Pointer; flags : ImGuiTreeNodeFlags; fmt : PAnsiChar; args : array of const ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTreeNodeSetOpen( id : ImGuiID; open : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNodeUpdateNextOpen( id : ImGuiID; flags : ImGuiTreeNodeFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNodeV_Str( str_id : PAnsiChar; fmt : PAnsiChar; args : array of const ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTreeNodeV_Ptr( ptr_id : Pointer; fmt : PAnsiChar; args : array of const ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTreePop( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTreePush_Str( str_id : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTreePush_Ptr( ptr_id : Pointer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igTreePushOverrideID( id : ImGuiID ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTypingSelectFindBestLeadingMatch( req : PImGuiTypingSelectRequest; items_count : Integer; get_item_name_func : TImGuiComboItemsGetterFunc ;user_data : Pointer ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTypingSelectFindMatch( req : PImGuiTypingSelectRequest; items_count : Integer; get_item_name_func : TImGuiComboItemsGetterFunc ;user_data : Pointer; nav_item_idx : Integer ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igTypingSelectFindNextSingleCharMatch( req : PImGuiTypingSelectRequest; items_count : Integer; get_item_name_func : TImGuiComboItemsGetterFunc ;user_data : Pointer; nav_item_idx : Integer ) : Integer; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igUnindent( indent_w : Single ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igUpdateHoveredWindowAndCaptureFlags( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igUpdateInputEvents( trickle_fast_inputs : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igUpdateMouseMovingWindowEndFrame( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igUpdateMouseMovingWindowNewFrame( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igUpdatePlatformWindows( ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igUpdateWindowParentAndRootLinks( window : PImGuiWindow; flags : ImGuiWindowFlags; parent_window : PImGuiWindow ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igVSliderFloat( label_ : PAnsiChar; size : ImVec2; v : PSingle; v_min : Single; v_max : Single; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igVSliderInt( label_ : PAnsiChar; size : ImVec2; v : PInteger; v_min : Integer; v_max : Integer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
function igVSliderScalar( label_ : PAnsiChar; size : ImVec2; data_type : ImGuiDataType; p_data : Pointer; p_min : Pointer; p_max : Pointer; format : PAnsiChar; flags : ImGuiSliderFlags ) : Boolean; cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igValue_Bool( prefix : PAnsiChar; b : Boolean ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igValue_Int( prefix : PAnsiChar; v : Integer ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igValue_Uint( prefix : PAnsiChar; v : ImU32 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igValue_Float( prefix : PAnsiChar; v : Single; float_format : PAnsiChar ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igWindowPosRelToAbs( pOut : PImVec2; window : PImGuiWindow; p : ImVec2 ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igWindowRectAbsToRel( pOut : PImRect; window : PImGuiWindow; r : ImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};
procedure igWindowRectRelToAbs( pOut : PImRect; window : PImGuiWindow; r : ImRect ); cdecl; external {$IFDEF DYNAMIC_LINK}CIMGUI_LIB{$ENDIF};

implementation
  uses
    math;

initialization
  // Disabling Floating-Point Exceptions
  SetExceptionMask([exInvalidOp, exDenormalized, exZeroDivide, exOverflow, exUnderflow, exPrecision]);

end.
